
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003580  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  00003580  00003614  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000f4  008000f4  000036a8  2**0
                  ALLOC
  3 .stab         000032a0  00000000  00000000  000036a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000119c  00000000  00000000  00006948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000099dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b678  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b7d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c233  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 da 18 	jmp	0x31b4	; 0x31b4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3f       	cpi	r26, 0xFE	; 254
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <main>
      8a:	0c 94 be 1a 	jmp	0x357c	; 0x357c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 ed       	ldi	r26, 0xD9	; 217
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 42 1a 	jmp	0x3484	; 0x3484 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 ed       	ldi	r24, 0xD9	; 217
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HMI_createPass>:
 * UART. And then it receives the status whether they match or not, if matching then it displays:
 * + open door, - change pass
 * If not, then it restarts the function until the user enter both passwords correctly.
 */
void HMI_createPass()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c8 54       	subi	r28, 0x48	; 72
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	fe 01       	movw	r30, r28
     b62:	ed 5b       	subi	r30, 0xBD	; 189
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a6 e9       	ldi	r26, 0x96	; 150
     b6c:	b3 e4       	ldi	r27, 0x43	; 67
     b6e:	80 83       	st	Z, r24
     b70:	91 83       	std	Z+1, r25	; 0x01
     b72:	a2 83       	std	Z+2, r26	; 0x02
     b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b76:	8e 01       	movw	r16, r28
     b78:	01 5c       	subi	r16, 0xC1	; 193
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	fe 01       	movw	r30, r28
     b7e:	ed 5b       	subi	r30, 0xBD	; 189
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	60 81       	ld	r22, Z
     b84:	71 81       	ldd	r23, Z+1	; 0x01
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	93 81       	ldd	r25, Z+3	; 0x03
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	f8 01       	movw	r30, r16
     b9c:	80 83       	st	Z, r24
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	a2 83       	std	Z+2, r26	; 0x02
     ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ba4:	fe 01       	movw	r30, r28
     ba6:	ff 96       	adiw	r30, 0x3f	; 63
     ba8:	60 81       	ld	r22, Z
     baa:	71 81       	ldd	r23, Z+1	; 0x01
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	2c f4       	brge	.+10     	; 0xbca <HMI_createPass+0x84>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9e af       	std	Y+62, r25	; 0x3e
     bc6:	8d af       	std	Y+61, r24	; 0x3d
     bc8:	46 c0       	rjmp	.+140    	; 0xc56 <HMI_createPass+0x110>
	else if (__tmp > 65535)
     bca:	fe 01       	movw	r30, r28
     bcc:	ff 96       	adiw	r30, 0x3f	; 63
     bce:	60 81       	ld	r22, Z
     bd0:	71 81       	ldd	r23, Z+1	; 0x01
     bd2:	82 81       	ldd	r24, Z+2	; 0x02
     bd4:	93 81       	ldd	r25, Z+3	; 0x03
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be2:	18 16       	cp	r1, r24
     be4:	64 f5       	brge	.+88     	; 0xc3e <HMI_createPass+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be6:	fe 01       	movw	r30, r28
     be8:	ed 5b       	subi	r30, 0xBD	; 189
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	60 81       	ld	r22, Z
     bee:	71 81       	ldd	r23, Z+1	; 0x01
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
     bf2:	93 81       	ldd	r25, Z+3	; 0x03
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e af       	std	Y+62, r25	; 0x3e
     c12:	8d af       	std	Y+61, r24	; 0x3d
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <HMI_createPass+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c af       	std	Y+60, r25	; 0x3c
     c1c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b ad       	ldd	r24, Y+59	; 0x3b
     c20:	9c ad       	ldd	r25, Y+60	; 0x3c
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <HMI_createPass+0xdc>
     c26:	9c af       	std	Y+60, r25	; 0x3c
     c28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
     c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e af       	std	Y+62, r25	; 0x3e
     c32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d ad       	ldd	r24, Y+61	; 0x3d
     c36:	9e ad       	ldd	r25, Y+62	; 0x3e
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <HMI_createPass+0xd0>
     c3c:	16 c0       	rjmp	.+44     	; 0xc6a <HMI_createPass+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	fe 01       	movw	r30, r28
     c40:	ff 96       	adiw	r30, 0x3f	; 63
     c42:	60 81       	ld	r22, Z
     c44:	71 81       	ldd	r23, Z+1	; 0x01
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e af       	std	Y+62, r25	; 0x3e
     c54:	8d af       	std	Y+61, r24	; 0x3d
     c56:	8d ad       	ldd	r24, Y+61	; 0x3d
     c58:	9e ad       	ldd	r25, Y+62	; 0x3e
     c5a:	9a af       	std	Y+58, r25	; 0x3a
     c5c:	89 af       	std	Y+57, r24	; 0x39
     c5e:	89 ad       	ldd	r24, Y+57	; 0x39
     c60:	9a ad       	ldd	r25, Y+58	; 0x3a
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <HMI_createPass+0x11c>
     c66:	9a af       	std	Y+58, r25	; 0x3a
     c68:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(300);
	LCD_clearScreen();
     c6a:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	LCD_displayString("plz enter pass: ");
     c76:	80 e6       	ldi	r24, 0x60	; 96
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
	LCD_moveCursor(1,0);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	HMI_readyToSend(CREATE_PASS);
     c86:	8c e0       	ldi	r24, 0x0C	; 12
     c88:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <HMI_readyToSend>
	for(uint8 i=0;i<5;i++)
     c8c:	fe 01       	movw	r30, r28
     c8e:	e8 5b       	subi	r30, 0xB8	; 184
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	10 82       	st	Z, r1
     c94:	82 c0       	rjmp	.+260    	; 0xd9a <HMI_createPass+0x254>
	{
		UART_sendByte(KEYPAD_getPressedKey());
     c96:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KEYPAD_getPressedKey>
     c9a:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
		LCD_displayCharacter('*');
     c9e:	8a e2       	ldi	r24, 0x2A	; 42
     ca0:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_displayCharacter>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	a8 ec       	ldi	r26, 0xC8	; 200
     caa:	b3 e4       	ldi	r27, 0x43	; 67
     cac:	8d ab       	std	Y+53, r24	; 0x35
     cae:	9e ab       	std	Y+54, r25	; 0x36
     cb0:	af ab       	std	Y+55, r26	; 0x37
     cb2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb4:	6d a9       	ldd	r22, Y+53	; 0x35
     cb6:	7e a9       	ldd	r23, Y+54	; 0x36
     cb8:	8f a9       	ldd	r24, Y+55	; 0x37
     cba:	98 ad       	ldd	r25, Y+56	; 0x38
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	4a ef       	ldi	r20, 0xFA	; 250
     cc2:	54 e4       	ldi	r21, 0x44	; 68
     cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	89 ab       	std	Y+49, r24	; 0x31
     cce:	9a ab       	std	Y+50, r25	; 0x32
     cd0:	ab ab       	std	Y+51, r26	; 0x33
     cd2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cd4:	69 a9       	ldd	r22, Y+49	; 0x31
     cd6:	7a a9       	ldd	r23, Y+50	; 0x32
     cd8:	8b a9       	ldd	r24, Y+51	; 0x33
     cda:	9c a9       	ldd	r25, Y+52	; 0x34
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e8       	ldi	r20, 0x80	; 128
     ce2:	5f e3       	ldi	r21, 0x3F	; 63
     ce4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ce8:	88 23       	and	r24, r24
     cea:	2c f4       	brge	.+10     	; 0xcf6 <HMI_createPass+0x1b0>
		__ticks = 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	98 ab       	std	Y+48, r25	; 0x30
     cf2:	8f a7       	std	Y+47, r24	; 0x2f
     cf4:	3f c0       	rjmp	.+126    	; 0xd74 <HMI_createPass+0x22e>
	else if (__tmp > 65535)
     cf6:	69 a9       	ldd	r22, Y+49	; 0x31
     cf8:	7a a9       	ldd	r23, Y+50	; 0x32
     cfa:	8b a9       	ldd	r24, Y+51	; 0x33
     cfc:	9c a9       	ldd	r25, Y+52	; 0x34
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	3f ef       	ldi	r19, 0xFF	; 255
     d02:	4f e7       	ldi	r20, 0x7F	; 127
     d04:	57 e4       	ldi	r21, 0x47	; 71
     d06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d0a:	18 16       	cp	r1, r24
     d0c:	4c f5       	brge	.+82     	; 0xd60 <HMI_createPass+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0e:	6d a9       	ldd	r22, Y+53	; 0x35
     d10:	7e a9       	ldd	r23, Y+54	; 0x36
     d12:	8f a9       	ldd	r24, Y+55	; 0x37
     d14:	98 ad       	ldd	r25, Y+56	; 0x38
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e2       	ldi	r20, 0x20	; 32
     d1c:	51 e4       	ldi	r21, 0x41	; 65
     d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	bc 01       	movw	r22, r24
     d28:	cd 01       	movw	r24, r26
     d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	98 ab       	std	Y+48, r25	; 0x30
     d34:	8f a7       	std	Y+47, r24	; 0x2f
     d36:	0f c0       	rjmp	.+30     	; 0xd56 <HMI_createPass+0x210>
     d38:	88 ec       	ldi	r24, 0xC8	; 200
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	9e a7       	std	Y+46, r25	; 0x2e
     d3e:	8d a7       	std	Y+45, r24	; 0x2d
     d40:	8d a5       	ldd	r24, Y+45	; 0x2d
     d42:	9e a5       	ldd	r25, Y+46	; 0x2e
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <HMI_createPass+0x1fe>
     d48:	9e a7       	std	Y+46, r25	; 0x2e
     d4a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d4e:	98 a9       	ldd	r25, Y+48	; 0x30
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	98 ab       	std	Y+48, r25	; 0x30
     d54:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d56:	8f a5       	ldd	r24, Y+47	; 0x2f
     d58:	98 a9       	ldd	r25, Y+48	; 0x30
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	69 f7       	brne	.-38     	; 0xd38 <HMI_createPass+0x1f2>
     d5e:	14 c0       	rjmp	.+40     	; 0xd88 <HMI_createPass+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d60:	69 a9       	ldd	r22, Y+49	; 0x31
     d62:	7a a9       	ldd	r23, Y+50	; 0x32
     d64:	8b a9       	ldd	r24, Y+51	; 0x33
     d66:	9c a9       	ldd	r25, Y+52	; 0x34
     d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	98 ab       	std	Y+48, r25	; 0x30
     d72:	8f a7       	std	Y+47, r24	; 0x2f
     d74:	8f a5       	ldd	r24, Y+47	; 0x2f
     d76:	98 a9       	ldd	r25, Y+48	; 0x30
     d78:	9c a7       	std	Y+44, r25	; 0x2c
     d7a:	8b a7       	std	Y+43, r24	; 0x2b
     d7c:	8b a5       	ldd	r24, Y+43	; 0x2b
     d7e:	9c a5       	ldd	r25, Y+44	; 0x2c
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <HMI_createPass+0x23a>
     d84:	9c a7       	std	Y+44, r25	; 0x2c
     d86:	8b a7       	std	Y+43, r24	; 0x2b
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("plz enter pass: ");
	LCD_moveCursor(1,0);
	HMI_readyToSend(CREATE_PASS);
	for(uint8 i=0;i<5;i++)
     d88:	de 01       	movw	r26, r28
     d8a:	a8 5b       	subi	r26, 0xB8	; 184
     d8c:	bf 4f       	sbci	r27, 0xFF	; 255
     d8e:	fe 01       	movw	r30, r28
     d90:	e8 5b       	subi	r30, 0xB8	; 184
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	80 81       	ld	r24, Z
     d96:	8f 5f       	subi	r24, 0xFF	; 255
     d98:	8c 93       	st	X, r24
     d9a:	fe 01       	movw	r30, r28
     d9c:	e8 5b       	subi	r30, 0xB8	; 184
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	80 81       	ld	r24, Z
     da2:	85 30       	cpi	r24, 0x05	; 5
     da4:	08 f4       	brcc	.+2      	; 0xda8 <HMI_createPass+0x262>
     da6:	77 cf       	rjmp	.-274    	; 0xc96 <HMI_createPass+0x150>
	{
		UART_sendByte(KEYPAD_getPressedKey());
		LCD_displayCharacter('*');
		_delay_ms(400);
	}
	while(KEYPAD_getPressedKey()!='=');
     da8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KEYPAD_getPressedKey>
     dac:	8d 33       	cpi	r24, 0x3D	; 61
     dae:	e1 f7       	brne	.-8      	; 0xda8 <HMI_createPass+0x262>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	a6 e9       	ldi	r26, 0x96	; 150
     db6:	b3 e4       	ldi	r27, 0x43	; 67
     db8:	8f a3       	std	Y+39, r24	; 0x27
     dba:	98 a7       	std	Y+40, r25	; 0x28
     dbc:	a9 a7       	std	Y+41, r26	; 0x29
     dbe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc0:	6f a1       	ldd	r22, Y+39	; 0x27
     dc2:	78 a5       	ldd	r23, Y+40	; 0x28
     dc4:	89 a5       	ldd	r24, Y+41	; 0x29
     dc6:	9a a5       	ldd	r25, Y+42	; 0x2a
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	4a ef       	ldi	r20, 0xFA	; 250
     dce:	54 e4       	ldi	r21, 0x44	; 68
     dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd4:	dc 01       	movw	r26, r24
     dd6:	cb 01       	movw	r24, r22
     dd8:	8b a3       	std	Y+35, r24	; 0x23
     dda:	9c a3       	std	Y+36, r25	; 0x24
     ddc:	ad a3       	std	Y+37, r26	; 0x25
     dde:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     de0:	6b a1       	ldd	r22, Y+35	; 0x23
     de2:	7c a1       	ldd	r23, Y+36	; 0x24
     de4:	8d a1       	ldd	r24, Y+37	; 0x25
     de6:	9e a1       	ldd	r25, Y+38	; 0x26
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e8       	ldi	r20, 0x80	; 128
     dee:	5f e3       	ldi	r21, 0x3F	; 63
     df0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df4:	88 23       	and	r24, r24
     df6:	2c f4       	brge	.+10     	; 0xe02 <HMI_createPass+0x2bc>
		__ticks = 1;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	9a a3       	std	Y+34, r25	; 0x22
     dfe:	89 a3       	std	Y+33, r24	; 0x21
     e00:	3f c0       	rjmp	.+126    	; 0xe80 <HMI_createPass+0x33a>
	else if (__tmp > 65535)
     e02:	6b a1       	ldd	r22, Y+35	; 0x23
     e04:	7c a1       	ldd	r23, Y+36	; 0x24
     e06:	8d a1       	ldd	r24, Y+37	; 0x25
     e08:	9e a1       	ldd	r25, Y+38	; 0x26
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	3f ef       	ldi	r19, 0xFF	; 255
     e0e:	4f e7       	ldi	r20, 0x7F	; 127
     e10:	57 e4       	ldi	r21, 0x47	; 71
     e12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e16:	18 16       	cp	r1, r24
     e18:	4c f5       	brge	.+82     	; 0xe6c <HMI_createPass+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1a:	6f a1       	ldd	r22, Y+39	; 0x27
     e1c:	78 a5       	ldd	r23, Y+40	; 0x28
     e1e:	89 a5       	ldd	r24, Y+41	; 0x29
     e20:	9a a5       	ldd	r25, Y+42	; 0x2a
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	40 e2       	ldi	r20, 0x20	; 32
     e28:	51 e4       	ldi	r21, 0x41	; 65
     e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	bc 01       	movw	r22, r24
     e34:	cd 01       	movw	r24, r26
     e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	9a a3       	std	Y+34, r25	; 0x22
     e40:	89 a3       	std	Y+33, r24	; 0x21
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <HMI_createPass+0x31c>
     e44:	88 ec       	ldi	r24, 0xC8	; 200
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	98 a3       	std	Y+32, r25	; 0x20
     e4a:	8f 8f       	std	Y+31, r24	; 0x1f
     e4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e4e:	98 a1       	ldd	r25, Y+32	; 0x20
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	f1 f7       	brne	.-4      	; 0xe50 <HMI_createPass+0x30a>
     e54:	98 a3       	std	Y+32, r25	; 0x20
     e56:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e58:	89 a1       	ldd	r24, Y+33	; 0x21
     e5a:	9a a1       	ldd	r25, Y+34	; 0x22
     e5c:	01 97       	sbiw	r24, 0x01	; 1
     e5e:	9a a3       	std	Y+34, r25	; 0x22
     e60:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e62:	89 a1       	ldd	r24, Y+33	; 0x21
     e64:	9a a1       	ldd	r25, Y+34	; 0x22
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	69 f7       	brne	.-38     	; 0xe44 <HMI_createPass+0x2fe>
     e6a:	14 c0       	rjmp	.+40     	; 0xe94 <HMI_createPass+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e6c:	6b a1       	ldd	r22, Y+35	; 0x23
     e6e:	7c a1       	ldd	r23, Y+36	; 0x24
     e70:	8d a1       	ldd	r24, Y+37	; 0x25
     e72:	9e a1       	ldd	r25, Y+38	; 0x26
     e74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e78:	dc 01       	movw	r26, r24
     e7a:	cb 01       	movw	r24, r22
     e7c:	9a a3       	std	Y+34, r25	; 0x22
     e7e:	89 a3       	std	Y+33, r24	; 0x21
     e80:	89 a1       	ldd	r24, Y+33	; 0x21
     e82:	9a a1       	ldd	r25, Y+34	; 0x22
     e84:	9e 8f       	std	Y+30, r25	; 0x1e
     e86:	8d 8f       	std	Y+29, r24	; 0x1d
     e88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <HMI_createPass+0x346>
     e90:	9e 8f       	std	Y+30, r25	; 0x1e
     e92:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(300);
	LCD_clearScreen();
     e94:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
	LCD_moveCursor(0,0);
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	LCD_displayString("plz re-enter the");
     ea0:	81 e7       	ldi	r24, 0x71	; 113
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
	LCD_moveCursor(1,0);
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	60 e0       	ldi	r22, 0x00	; 0
     eac:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	LCD_displayString("same pass: ");
     eb0:	82 e8       	ldi	r24, 0x82	; 130
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
	HMI_readyToSend(CREATE_PASS2);
     eb8:	8d e0       	ldi	r24, 0x0D	; 13
     eba:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <HMI_readyToSend>
	for(uint8 i=0;i<5;i++)
     ebe:	fe 01       	movw	r30, r28
     ec0:	e9 5b       	subi	r30, 0xB9	; 185
     ec2:	ff 4f       	sbci	r31, 0xFF	; 255
     ec4:	10 82       	st	Z, r1
     ec6:	82 c0       	rjmp	.+260    	; 0xfcc <HMI_createPass+0x486>
		{
			UART_sendByte(KEYPAD_getPressedKey());
     ec8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KEYPAD_getPressedKey>
     ecc:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
			LCD_displayCharacter('*');
     ed0:	8a e2       	ldi	r24, 0x2A	; 42
     ed2:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_displayCharacter>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	a8 ec       	ldi	r26, 0xC8	; 200
     edc:	b3 e4       	ldi	r27, 0x43	; 67
     ede:	89 8f       	std	Y+25, r24	; 0x19
     ee0:	9a 8f       	std	Y+26, r25	; 0x1a
     ee2:	ab 8f       	std	Y+27, r26	; 0x1b
     ee4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee6:	69 8d       	ldd	r22, Y+25	; 0x19
     ee8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eea:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eec:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	4a ef       	ldi	r20, 0xFA	; 250
     ef4:	54 e4       	ldi	r21, 0x44	; 68
     ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	8d 8b       	std	Y+21, r24	; 0x15
     f00:	9e 8b       	std	Y+22, r25	; 0x16
     f02:	af 8b       	std	Y+23, r26	; 0x17
     f04:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f06:	6d 89       	ldd	r22, Y+21	; 0x15
     f08:	7e 89       	ldd	r23, Y+22	; 0x16
     f0a:	8f 89       	ldd	r24, Y+23	; 0x17
     f0c:	98 8d       	ldd	r25, Y+24	; 0x18
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e8       	ldi	r20, 0x80	; 128
     f14:	5f e3       	ldi	r21, 0x3F	; 63
     f16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f1a:	88 23       	and	r24, r24
     f1c:	2c f4       	brge	.+10     	; 0xf28 <HMI_createPass+0x3e2>
		__ticks = 1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9c 8b       	std	Y+20, r25	; 0x14
     f24:	8b 8b       	std	Y+19, r24	; 0x13
     f26:	3f c0       	rjmp	.+126    	; 0xfa6 <HMI_createPass+0x460>
	else if (__tmp > 65535)
     f28:	6d 89       	ldd	r22, Y+21	; 0x15
     f2a:	7e 89       	ldd	r23, Y+22	; 0x16
     f2c:	8f 89       	ldd	r24, Y+23	; 0x17
     f2e:	98 8d       	ldd	r25, Y+24	; 0x18
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	3f ef       	ldi	r19, 0xFF	; 255
     f34:	4f e7       	ldi	r20, 0x7F	; 127
     f36:	57 e4       	ldi	r21, 0x47	; 71
     f38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f3c:	18 16       	cp	r1, r24
     f3e:	4c f5       	brge	.+82     	; 0xf92 <HMI_createPass+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f40:	69 8d       	ldd	r22, Y+25	; 0x19
     f42:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f44:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f46:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e2       	ldi	r20, 0x20	; 32
     f4e:	51 e4       	ldi	r21, 0x41	; 65
     f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	bc 01       	movw	r22, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	9c 8b       	std	Y+20, r25	; 0x14
     f66:	8b 8b       	std	Y+19, r24	; 0x13
     f68:	0f c0       	rjmp	.+30     	; 0xf88 <HMI_createPass+0x442>
     f6a:	88 ec       	ldi	r24, 0xC8	; 200
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	9a 8b       	std	Y+18, r25	; 0x12
     f70:	89 8b       	std	Y+17, r24	; 0x11
     f72:	89 89       	ldd	r24, Y+17	; 0x11
     f74:	9a 89       	ldd	r25, Y+18	; 0x12
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <HMI_createPass+0x430>
     f7a:	9a 8b       	std	Y+18, r25	; 0x12
     f7c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7e:	8b 89       	ldd	r24, Y+19	; 0x13
     f80:	9c 89       	ldd	r25, Y+20	; 0x14
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	9c 8b       	std	Y+20, r25	; 0x14
     f86:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f88:	8b 89       	ldd	r24, Y+19	; 0x13
     f8a:	9c 89       	ldd	r25, Y+20	; 0x14
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	69 f7       	brne	.-38     	; 0xf6a <HMI_createPass+0x424>
     f90:	14 c0       	rjmp	.+40     	; 0xfba <HMI_createPass+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f92:	6d 89       	ldd	r22, Y+21	; 0x15
     f94:	7e 89       	ldd	r23, Y+22	; 0x16
     f96:	8f 89       	ldd	r24, Y+23	; 0x17
     f98:	98 8d       	ldd	r25, Y+24	; 0x18
     f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	9c 8b       	std	Y+20, r25	; 0x14
     fa4:	8b 8b       	std	Y+19, r24	; 0x13
     fa6:	8b 89       	ldd	r24, Y+19	; 0x13
     fa8:	9c 89       	ldd	r25, Y+20	; 0x14
     faa:	98 8b       	std	Y+16, r25	; 0x10
     fac:	8f 87       	std	Y+15, r24	; 0x0f
     fae:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb0:	98 89       	ldd	r25, Y+16	; 0x10
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <HMI_createPass+0x46c>
     fb6:	98 8b       	std	Y+16, r25	; 0x10
     fb8:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_moveCursor(0,0);
	LCD_displayString("plz re-enter the");
	LCD_moveCursor(1,0);
	LCD_displayString("same pass: ");
	HMI_readyToSend(CREATE_PASS2);
	for(uint8 i=0;i<5;i++)
     fba:	de 01       	movw	r26, r28
     fbc:	a9 5b       	subi	r26, 0xB9	; 185
     fbe:	bf 4f       	sbci	r27, 0xFF	; 255
     fc0:	fe 01       	movw	r30, r28
     fc2:	e9 5b       	subi	r30, 0xB9	; 185
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	80 81       	ld	r24, Z
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	8c 93       	st	X, r24
     fcc:	fe 01       	movw	r30, r28
     fce:	e9 5b       	subi	r30, 0xB9	; 185
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	85 30       	cpi	r24, 0x05	; 5
     fd6:	08 f4       	brcc	.+2      	; 0xfda <HMI_createPass+0x494>
     fd8:	77 cf       	rjmp	.-274    	; 0xec8 <HMI_createPass+0x382>
		{
			UART_sendByte(KEYPAD_getPressedKey());
			LCD_displayCharacter('*');
			_delay_ms(400);
		}
	while(KEYPAD_getPressedKey()!='=');
     fda:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KEYPAD_getPressedKey>
     fde:	8d 33       	cpi	r24, 0x3D	; 61
     fe0:	e1 f7       	brne	.-8      	; 0xfda <HMI_createPass+0x494>
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	a6 e9       	ldi	r26, 0x96	; 150
     fe8:	b3 e4       	ldi	r27, 0x43	; 67
     fea:	8b 87       	std	Y+11, r24	; 0x0b
     fec:	9c 87       	std	Y+12, r25	; 0x0c
     fee:	ad 87       	std	Y+13, r26	; 0x0d
     ff0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ff6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ff8:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	4a ef       	ldi	r20, 0xFA	; 250
    1000:	54 e4       	ldi	r21, 0x44	; 68
    1002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1006:	dc 01       	movw	r26, r24
    1008:	cb 01       	movw	r24, r22
    100a:	8f 83       	std	Y+7, r24	; 0x07
    100c:	98 87       	std	Y+8, r25	; 0x08
    100e:	a9 87       	std	Y+9, r26	; 0x09
    1010:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1012:	6f 81       	ldd	r22, Y+7	; 0x07
    1014:	78 85       	ldd	r23, Y+8	; 0x08
    1016:	89 85       	ldd	r24, Y+9	; 0x09
    1018:	9a 85       	ldd	r25, Y+10	; 0x0a
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	5f e3       	ldi	r21, 0x3F	; 63
    1022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1026:	88 23       	and	r24, r24
    1028:	2c f4       	brge	.+10     	; 0x1034 <HMI_createPass+0x4ee>
		__ticks = 1;
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	9e 83       	std	Y+6, r25	; 0x06
    1030:	8d 83       	std	Y+5, r24	; 0x05
    1032:	3f c0       	rjmp	.+126    	; 0x10b2 <HMI_createPass+0x56c>
	else if (__tmp > 65535)
    1034:	6f 81       	ldd	r22, Y+7	; 0x07
    1036:	78 85       	ldd	r23, Y+8	; 0x08
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	3f ef       	ldi	r19, 0xFF	; 255
    1040:	4f e7       	ldi	r20, 0x7F	; 127
    1042:	57 e4       	ldi	r21, 0x47	; 71
    1044:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1048:	18 16       	cp	r1, r24
    104a:	4c f5       	brge	.+82     	; 0x109e <HMI_createPass+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104c:	6b 85       	ldd	r22, Y+11	; 0x0b
    104e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1050:	8d 85       	ldd	r24, Y+13	; 0x0d
    1052:	9e 85       	ldd	r25, Y+14	; 0x0e
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	40 e2       	ldi	r20, 0x20	; 32
    105a:	51 e4       	ldi	r21, 0x41	; 65
    105c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	bc 01       	movw	r22, r24
    1066:	cd 01       	movw	r24, r26
    1068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106c:	dc 01       	movw	r26, r24
    106e:	cb 01       	movw	r24, r22
    1070:	9e 83       	std	Y+6, r25	; 0x06
    1072:	8d 83       	std	Y+5, r24	; 0x05
    1074:	0f c0       	rjmp	.+30     	; 0x1094 <HMI_createPass+0x54e>
    1076:	88 ec       	ldi	r24, 0xC8	; 200
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <HMI_createPass+0x53c>
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	9e 81       	ldd	r25, Y+6	; 0x06
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	9e 83       	std	Y+6, r25	; 0x06
    1092:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	00 97       	sbiw	r24, 0x00	; 0
    109a:	69 f7       	brne	.-38     	; 0x1076 <HMI_createPass+0x530>
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <HMI_createPass+0x580>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109e:	6f 81       	ldd	r22, Y+7	; 0x07
    10a0:	78 85       	ldd	r23, Y+8	; 0x08
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	9e 83       	std	Y+6, r25	; 0x06
    10b0:	8d 83       	std	Y+5, r24	; 0x05
    10b2:	8d 81       	ldd	r24, Y+5	; 0x05
    10b4:	9e 81       	ldd	r25, Y+6	; 0x06
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <HMI_createPass+0x578>
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LCD_clearScreen();
    10c6:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
	status=HMI_readyToRecieve();
    10ca:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <HMI_readyToRecieve>
    10ce:	80 93 fd 00 	sts	0x00FD, r24
	if(status==POSITIVE)
    10d2:	80 91 fd 00 	lds	r24, 0x00FD
    10d6:	80 31       	cpi	r24, 0x10	; 16
    10d8:	19 f4       	brne	.+6      	; 0x10e0 <HMI_createPass+0x59a>
		 HMI_displayOpt();
    10da:	0e 94 82 08 	call	0x1104	; 0x1104 <HMI_displayOpt>
    10de:	06 c0       	rjmp	.+12     	; 0x10ec <HMI_createPass+0x5a6>
	else if(status==FAIL)
    10e0:	80 91 fd 00 	lds	r24, 0x00FD
    10e4:	81 31       	cpi	r24, 0x11	; 17
    10e6:	11 f4       	brne	.+4      	; 0x10ec <HMI_createPass+0x5a6>
		 HMI_createPass();
    10e8:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_createPass>
}
    10ec:	c8 5b       	subi	r28, 0xB8	; 184
    10ee:	df 4f       	sbci	r29, 0xFF	; 255
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	08 95       	ret

00001104 <HMI_displayOpt>:
/*
 * Function description:
 * it displays on LCD whether the user wants to open door or change password
 */
void HMI_displayOpt()
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	2f 97       	sbiw	r28, 0x0f	; 15
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	a6 e9       	ldi	r26, 0x96	; 150
    111e:	b3 e4       	ldi	r27, 0x43	; 67
    1120:	8b 87       	std	Y+11, r24	; 0x0b
    1122:	9c 87       	std	Y+12, r25	; 0x0c
    1124:	ad 87       	std	Y+13, r26	; 0x0d
    1126:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1128:	6b 85       	ldd	r22, Y+11	; 0x0b
    112a:	7c 85       	ldd	r23, Y+12	; 0x0c
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	4a ef       	ldi	r20, 0xFA	; 250
    1136:	54 e4       	ldi	r21, 0x44	; 68
    1138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	8f 83       	std	Y+7, r24	; 0x07
    1142:	98 87       	std	Y+8, r25	; 0x08
    1144:	a9 87       	std	Y+9, r26	; 0x09
    1146:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1148:	6f 81       	ldd	r22, Y+7	; 0x07
    114a:	78 85       	ldd	r23, Y+8	; 0x08
    114c:	89 85       	ldd	r24, Y+9	; 0x09
    114e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	40 e8       	ldi	r20, 0x80	; 128
    1156:	5f e3       	ldi	r21, 0x3F	; 63
    1158:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    115c:	88 23       	and	r24, r24
    115e:	2c f4       	brge	.+10     	; 0x116a <HMI_displayOpt+0x66>
		__ticks = 1;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	9e 83       	std	Y+6, r25	; 0x06
    1166:	8d 83       	std	Y+5, r24	; 0x05
    1168:	3f c0       	rjmp	.+126    	; 0x11e8 <HMI_displayOpt+0xe4>
	else if (__tmp > 65535)
    116a:	6f 81       	ldd	r22, Y+7	; 0x07
    116c:	78 85       	ldd	r23, Y+8	; 0x08
    116e:	89 85       	ldd	r24, Y+9	; 0x09
    1170:	9a 85       	ldd	r25, Y+10	; 0x0a
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	3f ef       	ldi	r19, 0xFF	; 255
    1176:	4f e7       	ldi	r20, 0x7F	; 127
    1178:	57 e4       	ldi	r21, 0x47	; 71
    117a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    117e:	18 16       	cp	r1, r24
    1180:	4c f5       	brge	.+82     	; 0x11d4 <HMI_displayOpt+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1182:	6b 85       	ldd	r22, Y+11	; 0x0b
    1184:	7c 85       	ldd	r23, Y+12	; 0x0c
    1186:	8d 85       	ldd	r24, Y+13	; 0x0d
    1188:	9e 85       	ldd	r25, Y+14	; 0x0e
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e2       	ldi	r20, 0x20	; 32
    1190:	51 e4       	ldi	r21, 0x41	; 65
    1192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	bc 01       	movw	r22, r24
    119c:	cd 01       	movw	r24, r26
    119e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	9e 83       	std	Y+6, r25	; 0x06
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	0f c0       	rjmp	.+30     	; 0x11ca <HMI_displayOpt+0xc6>
    11ac:	88 ec       	ldi	r24, 0xC8	; 200
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	8b 83       	std	Y+3, r24	; 0x03
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <HMI_displayOpt+0xb4>
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	69 f7       	brne	.-38     	; 0x11ac <HMI_displayOpt+0xa8>
    11d2:	14 c0       	rjmp	.+40     	; 0x11fc <HMI_displayOpt+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d4:	6f 81       	ldd	r22, Y+7	; 0x07
    11d6:	78 85       	ldd	r23, Y+8	; 0x08
    11d8:	89 85       	ldd	r24, Y+9	; 0x09
    11da:	9a 85       	ldd	r25, Y+10	; 0x0a
    11dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e0:	dc 01       	movw	r26, r24
    11e2:	cb 01       	movw	r24, r22
    11e4:	9e 83       	std	Y+6, r25	; 0x06
    11e6:	8d 83       	std	Y+5, r24	; 0x05
    11e8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ea:	9e 81       	ldd	r25, Y+6	; 0x06
    11ec:	9a 83       	std	Y+2, r25	; 0x02
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	f1 f7       	brne	.-4      	; 0x11f4 <HMI_displayOpt+0xf0>
    11f8:	9a 83       	std	Y+2, r25	; 0x02
    11fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);
	LCD_clearScreen();
    11fc:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	LCD_displayString("+:Open door");
    1208:	8e e8       	ldi	r24, 0x8E	; 142
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
	LCD_moveCursor(1,0);
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	60 e0       	ldi	r22, 0x00	; 0
    1214:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	LCD_displayString("-:Change pass");
    1218:	8a e9       	ldi	r24, 0x9A	; 154
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
	uint8 num=KEYPAD_getPressedKey();
    1220:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KEYPAD_getPressedKey>
    1224:	8f 87       	std	Y+15, r24	; 0x0f
	if(num=='+')
    1226:	8f 85       	ldd	r24, Y+15	; 0x0f
    1228:	8b 32       	cpi	r24, 0x2B	; 43
    122a:	19 f4       	brne	.+6      	; 0x1232 <HMI_displayOpt+0x12e>
	 HMI_enterPassAfterOpt1();
    122c:	0e 94 27 09 	call	0x124e	; 0x124e <HMI_enterPassAfterOpt1>
    1230:	05 c0       	rjmp	.+10     	; 0x123c <HMI_displayOpt+0x138>
	 else if(num=='-')
    1232:	8f 85       	ldd	r24, Y+15	; 0x0f
    1234:	8d 32       	cpi	r24, 0x2D	; 45
    1236:	11 f4       	brne	.+4      	; 0x123c <HMI_displayOpt+0x138>
     HMI_enterPassAfterOpt2();
    1238:	0e 94 81 0a 	call	0x1502	; 0x1502 <HMI_enterPassAfterOpt2>
}
    123c:	2f 96       	adiw	r28, 0x0f	; 15
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <HMI_enterPassAfterOpt1>:
 * to send it to the CONTROL MCU to check similarity between it and the one stored in EEPROM
 * If matched then it opens the door
 * If not, it enters an alert state
 */
void HMI_enterPassAfterOpt1()
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	6d 97       	sbiw	r28, 0x1d	; 29
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	de bf       	out	0x3e, r29	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	cd bf       	out	0x3d, r28	; 61
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	a6 e9       	ldi	r26, 0x96	; 150
    1268:	b3 e4       	ldi	r27, 0x43	; 67
    126a:	89 8f       	std	Y+25, r24	; 0x19
    126c:	9a 8f       	std	Y+26, r25	; 0x1a
    126e:	ab 8f       	std	Y+27, r26	; 0x1b
    1270:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1272:	69 8d       	ldd	r22, Y+25	; 0x19
    1274:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1276:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1278:	9c 8d       	ldd	r25, Y+28	; 0x1c
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	4a ef       	ldi	r20, 0xFA	; 250
    1280:	54 e4       	ldi	r21, 0x44	; 68
    1282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	8d 8b       	std	Y+21, r24	; 0x15
    128c:	9e 8b       	std	Y+22, r25	; 0x16
    128e:	af 8b       	std	Y+23, r26	; 0x17
    1290:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1292:	6d 89       	ldd	r22, Y+21	; 0x15
    1294:	7e 89       	ldd	r23, Y+22	; 0x16
    1296:	8f 89       	ldd	r24, Y+23	; 0x17
    1298:	98 8d       	ldd	r25, Y+24	; 0x18
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	40 e8       	ldi	r20, 0x80	; 128
    12a0:	5f e3       	ldi	r21, 0x3F	; 63
    12a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a6:	88 23       	and	r24, r24
    12a8:	2c f4       	brge	.+10     	; 0x12b4 <HMI_enterPassAfterOpt1+0x66>
		__ticks = 1;
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9c 8b       	std	Y+20, r25	; 0x14
    12b0:	8b 8b       	std	Y+19, r24	; 0x13
    12b2:	3f c0       	rjmp	.+126    	; 0x1332 <HMI_enterPassAfterOpt1+0xe4>
	else if (__tmp > 65535)
    12b4:	6d 89       	ldd	r22, Y+21	; 0x15
    12b6:	7e 89       	ldd	r23, Y+22	; 0x16
    12b8:	8f 89       	ldd	r24, Y+23	; 0x17
    12ba:	98 8d       	ldd	r25, Y+24	; 0x18
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	3f ef       	ldi	r19, 0xFF	; 255
    12c0:	4f e7       	ldi	r20, 0x7F	; 127
    12c2:	57 e4       	ldi	r21, 0x47	; 71
    12c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c8:	18 16       	cp	r1, r24
    12ca:	4c f5       	brge	.+82     	; 0x131e <HMI_enterPassAfterOpt1+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12cc:	69 8d       	ldd	r22, Y+25	; 0x19
    12ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e2       	ldi	r20, 0x20	; 32
    12da:	51 e4       	ldi	r21, 0x41	; 65
    12dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e0:	dc 01       	movw	r26, r24
    12e2:	cb 01       	movw	r24, r22
    12e4:	bc 01       	movw	r22, r24
    12e6:	cd 01       	movw	r24, r26
    12e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	9c 8b       	std	Y+20, r25	; 0x14
    12f2:	8b 8b       	std	Y+19, r24	; 0x13
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <HMI_enterPassAfterOpt1+0xc6>
    12f6:	88 ec       	ldi	r24, 0xC8	; 200
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	9a 8b       	std	Y+18, r25	; 0x12
    12fc:	89 8b       	std	Y+17, r24	; 0x11
    12fe:	89 89       	ldd	r24, Y+17	; 0x11
    1300:	9a 89       	ldd	r25, Y+18	; 0x12
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	f1 f7       	brne	.-4      	; 0x1302 <HMI_enterPassAfterOpt1+0xb4>
    1306:	9a 8b       	std	Y+18, r25	; 0x12
    1308:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130a:	8b 89       	ldd	r24, Y+19	; 0x13
    130c:	9c 89       	ldd	r25, Y+20	; 0x14
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	9c 8b       	std	Y+20, r25	; 0x14
    1312:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1314:	8b 89       	ldd	r24, Y+19	; 0x13
    1316:	9c 89       	ldd	r25, Y+20	; 0x14
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	69 f7       	brne	.-38     	; 0x12f6 <HMI_enterPassAfterOpt1+0xa8>
    131c:	14 c0       	rjmp	.+40     	; 0x1346 <HMI_enterPassAfterOpt1+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    131e:	6d 89       	ldd	r22, Y+21	; 0x15
    1320:	7e 89       	ldd	r23, Y+22	; 0x16
    1322:	8f 89       	ldd	r24, Y+23	; 0x17
    1324:	98 8d       	ldd	r25, Y+24	; 0x18
    1326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	9c 8b       	std	Y+20, r25	; 0x14
    1330:	8b 8b       	std	Y+19, r24	; 0x13
    1332:	8b 89       	ldd	r24, Y+19	; 0x13
    1334:	9c 89       	ldd	r25, Y+20	; 0x14
    1336:	98 8b       	std	Y+16, r25	; 0x10
    1338:	8f 87       	std	Y+15, r24	; 0x0f
    133a:	8f 85       	ldd	r24, Y+15	; 0x0f
    133c:	98 89       	ldd	r25, Y+16	; 0x10
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <HMI_enterPassAfterOpt1+0xf0>
    1342:	98 8b       	std	Y+16, r25	; 0x10
    1344:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	LCD_clearScreen();
    1346:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
		LCD_displayString("plz enter pass: ");
    1352:	80 e6       	ldi	r24, 0x60	; 96
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
		LCD_moveCursor(1,0);
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
		HMI_readyToSend(OPEN_DOOR_CHECK_PASS);
    1362:	8e e0       	ldi	r24, 0x0E	; 14
    1364:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <HMI_readyToSend>
			for(uint8 i=0;i<5;i++)
    1368:	1d 8e       	std	Y+29, r1	; 0x1d
    136a:	7c c0       	rjmp	.+248    	; 0x1464 <HMI_enterPassAfterOpt1+0x216>
			{
				UART_sendByte(KEYPAD_getPressedKey());
    136c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KEYPAD_getPressedKey>
    1370:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
				LCD_displayCharacter('*');
    1374:	8a e2       	ldi	r24, 0x2A	; 42
    1376:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_displayCharacter>
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a8 ec       	ldi	r26, 0xC8	; 200
    1380:	b3 e4       	ldi	r27, 0x43	; 67
    1382:	8b 87       	std	Y+11, r24	; 0x0b
    1384:	9c 87       	std	Y+12, r25	; 0x0c
    1386:	ad 87       	std	Y+13, r26	; 0x0d
    1388:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138a:	6b 85       	ldd	r22, Y+11	; 0x0b
    138c:	7c 85       	ldd	r23, Y+12	; 0x0c
    138e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1390:	9e 85       	ldd	r25, Y+14	; 0x0e
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	4a ef       	ldi	r20, 0xFA	; 250
    1398:	54 e4       	ldi	r21, 0x44	; 68
    139a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    139e:	dc 01       	movw	r26, r24
    13a0:	cb 01       	movw	r24, r22
    13a2:	8f 83       	std	Y+7, r24	; 0x07
    13a4:	98 87       	std	Y+8, r25	; 0x08
    13a6:	a9 87       	std	Y+9, r26	; 0x09
    13a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13aa:	6f 81       	ldd	r22, Y+7	; 0x07
    13ac:	78 85       	ldd	r23, Y+8	; 0x08
    13ae:	89 85       	ldd	r24, Y+9	; 0x09
    13b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e8       	ldi	r20, 0x80	; 128
    13b8:	5f e3       	ldi	r21, 0x3F	; 63
    13ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13be:	88 23       	and	r24, r24
    13c0:	2c f4       	brge	.+10     	; 0x13cc <HMI_enterPassAfterOpt1+0x17e>
		__ticks = 1;
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	9e 83       	std	Y+6, r25	; 0x06
    13c8:	8d 83       	std	Y+5, r24	; 0x05
    13ca:	3f c0       	rjmp	.+126    	; 0x144a <HMI_enterPassAfterOpt1+0x1fc>
	else if (__tmp > 65535)
    13cc:	6f 81       	ldd	r22, Y+7	; 0x07
    13ce:	78 85       	ldd	r23, Y+8	; 0x08
    13d0:	89 85       	ldd	r24, Y+9	; 0x09
    13d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	3f ef       	ldi	r19, 0xFF	; 255
    13d8:	4f e7       	ldi	r20, 0x7F	; 127
    13da:	57 e4       	ldi	r21, 0x47	; 71
    13dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e0:	18 16       	cp	r1, r24
    13e2:	4c f5       	brge	.+82     	; 0x1436 <HMI_enterPassAfterOpt1+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	40 e2       	ldi	r20, 0x20	; 32
    13f2:	51 e4       	ldi	r21, 0x41	; 65
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	bc 01       	movw	r22, r24
    13fe:	cd 01       	movw	r24, r26
    1400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1404:	dc 01       	movw	r26, r24
    1406:	cb 01       	movw	r24, r22
    1408:	9e 83       	std	Y+6, r25	; 0x06
    140a:	8d 83       	std	Y+5, r24	; 0x05
    140c:	0f c0       	rjmp	.+30     	; 0x142c <HMI_enterPassAfterOpt1+0x1de>
    140e:	88 ec       	ldi	r24, 0xC8	; 200
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	9c 83       	std	Y+4, r25	; 0x04
    1414:	8b 83       	std	Y+3, r24	; 0x03
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	f1 f7       	brne	.-4      	; 0x141a <HMI_enterPassAfterOpt1+0x1cc>
    141e:	9c 83       	std	Y+4, r25	; 0x04
    1420:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1422:	8d 81       	ldd	r24, Y+5	; 0x05
    1424:	9e 81       	ldd	r25, Y+6	; 0x06
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	00 97       	sbiw	r24, 0x00	; 0
    1432:	69 f7       	brne	.-38     	; 0x140e <HMI_enterPassAfterOpt1+0x1c0>
    1434:	14 c0       	rjmp	.+40     	; 0x145e <HMI_enterPassAfterOpt1+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1436:	6f 81       	ldd	r22, Y+7	; 0x07
    1438:	78 85       	ldd	r23, Y+8	; 0x08
    143a:	89 85       	ldd	r24, Y+9	; 0x09
    143c:	9a 85       	ldd	r25, Y+10	; 0x0a
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	8d 81       	ldd	r24, Y+5	; 0x05
    144c:	9e 81       	ldd	r25, Y+6	; 0x06
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	9a 81       	ldd	r25, Y+2	; 0x02
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <HMI_enterPassAfterOpt1+0x208>
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_moveCursor(0,0);
		LCD_displayString("plz enter pass: ");
		LCD_moveCursor(1,0);
		HMI_readyToSend(OPEN_DOOR_CHECK_PASS);
			for(uint8 i=0;i<5;i++)
    145e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1460:	8f 5f       	subi	r24, 0xFF	; 255
    1462:	8d 8f       	std	Y+29, r24	; 0x1d
    1464:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1466:	85 30       	cpi	r24, 0x05	; 5
    1468:	08 f4       	brcc	.+2      	; 0x146c <HMI_enterPassAfterOpt1+0x21e>
    146a:	80 cf       	rjmp	.-256    	; 0x136c <HMI_enterPassAfterOpt1+0x11e>
				UART_sendByte(KEYPAD_getPressedKey());
				LCD_displayCharacter('*');
				_delay_ms(400);

			}
		while(KEYPAD_getPressedKey()!='=');
    146c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KEYPAD_getPressedKey>
    1470:	8d 33       	cpi	r24, 0x3D	; 61
    1472:	e1 f7       	brne	.-8      	; 0x146c <HMI_enterPassAfterOpt1+0x21e>
		LCD_clearScreen();
    1474:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
		status=HMI_readyToRecieve();
    1478:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <HMI_readyToRecieve>
    147c:	80 93 fd 00 	sts	0x00FD, r24
		if(status==POSITIVE)
    1480:	80 91 fd 00 	lds	r24, 0x00FD
    1484:	80 31       	cpi	r24, 0x10	; 16
    1486:	19 f4       	brne	.+6      	; 0x148e <HMI_enterPassAfterOpt1+0x240>
		HMI_openingDoor();
    1488:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <HMI_openingDoor>
    148c:	0d c0       	rjmp	.+26     	; 0x14a8 <HMI_enterPassAfterOpt1+0x25a>
		else if(status==FAIL)
    148e:	80 91 fd 00 	lds	r24, 0x00FD
    1492:	81 31       	cpi	r24, 0x11	; 17
    1494:	49 f4       	brne	.+18     	; 0x14a8 <HMI_enterPassAfterOpt1+0x25a>
		{
		alert_count++;
    1496:	80 91 f5 00 	lds	r24, 0x00F5
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	80 93 f5 00 	sts	0x00F5, r24
		trig=0;
    14a0:	10 92 fc 00 	sts	0x00FC, r1
		HMI_alertUser();
    14a4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <HMI_alertUser>
		}
}
    14a8:	6d 96       	adiw	r28, 0x1d	; 29
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	de bf       	out	0x3e, r29	; 62
    14b0:	0f be       	out	0x3f, r0	; 63
    14b2:	cd bf       	out	0x3d, r28	; 61
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <HMI_readyToSend>:
 * Function description:
 * Same function described in CONTROL MCU, the HMI sends a byte to signal that it is ready to send the
 * required selected operation to be executed by the CONTROL MCU
 */
void HMI_readyToSend(uint8 sel)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	0f 92       	push	r0
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    14c4:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(HMI_READY);
    14c6:	8b e0       	ldi	r24, 0x0B	; 11
    14c8:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
	while(UART_recieveByte()!=CONTROL_READY);
    14cc:	0e 94 a5 19 	call	0x334a	; 0x334a <UART_recieveByte>
    14d0:	8a 30       	cpi	r24, 0x0A	; 10
    14d2:	e1 f7       	brne	.-8      	; 0x14cc <HMI_readyToSend+0x12>
	UART_sendByte(sel);
    14d4:	89 81       	ldd	r24, Y+1	; 0x01
    14d6:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
}
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <HMI_readyToRecieve>:
 * READY and after that it sends HMI READY to signals the polling CONTROL MCU that it is ready to receive
 * the required byte, in this file it is the status that describes the match or the mismatch of
 * the passwords.
 */
uint8 HMI_readyToRecieve(void)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	cd b7       	in	r28, 0x3d	; 61
    14e8:	de b7       	in	r29, 0x3e	; 62
	while(UART_recieveByte()!=CONTROL_READY);
    14ea:	0e 94 a5 19 	call	0x334a	; 0x334a <UART_recieveByte>
    14ee:	8a 30       	cpi	r24, 0x0A	; 10
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <HMI_readyToRecieve+0x8>
	UART_sendByte(HMI_READY);
    14f2:	8b e0       	ldi	r24, 0x0B	; 11
    14f4:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
	return UART_recieveByte();
    14f8:	0e 94 a5 19 	call	0x334a	; 0x334a <UART_recieveByte>
}
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <HMI_enterPassAfterOpt2>:
 * to send it to the CONTROL MCU to check similarity between it and the one stored in EEPROM
 * If matched then it changes the password to the one the user desires
 * If not, it enters an alert state
 */
void HMI_enterPassAfterOpt2()
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	6d 97       	sbiw	r28, 0x1d	; 29
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a6 e9       	ldi	r26, 0x96	; 150
    151c:	b3 e4       	ldi	r27, 0x43	; 67
    151e:	89 8f       	std	Y+25, r24	; 0x19
    1520:	9a 8f       	std	Y+26, r25	; 0x1a
    1522:	ab 8f       	std	Y+27, r26	; 0x1b
    1524:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1526:	69 8d       	ldd	r22, Y+25	; 0x19
    1528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    152a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    152c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	4a ef       	ldi	r20, 0xFA	; 250
    1534:	54 e4       	ldi	r21, 0x44	; 68
    1536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	8d 8b       	std	Y+21, r24	; 0x15
    1540:	9e 8b       	std	Y+22, r25	; 0x16
    1542:	af 8b       	std	Y+23, r26	; 0x17
    1544:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1546:	6d 89       	ldd	r22, Y+21	; 0x15
    1548:	7e 89       	ldd	r23, Y+22	; 0x16
    154a:	8f 89       	ldd	r24, Y+23	; 0x17
    154c:	98 8d       	ldd	r25, Y+24	; 0x18
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	40 e8       	ldi	r20, 0x80	; 128
    1554:	5f e3       	ldi	r21, 0x3F	; 63
    1556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    155a:	88 23       	and	r24, r24
    155c:	2c f4       	brge	.+10     	; 0x1568 <HMI_enterPassAfterOpt2+0x66>
		__ticks = 1;
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	9c 8b       	std	Y+20, r25	; 0x14
    1564:	8b 8b       	std	Y+19, r24	; 0x13
    1566:	3f c0       	rjmp	.+126    	; 0x15e6 <HMI_enterPassAfterOpt2+0xe4>
	else if (__tmp > 65535)
    1568:	6d 89       	ldd	r22, Y+21	; 0x15
    156a:	7e 89       	ldd	r23, Y+22	; 0x16
    156c:	8f 89       	ldd	r24, Y+23	; 0x17
    156e:	98 8d       	ldd	r25, Y+24	; 0x18
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	3f ef       	ldi	r19, 0xFF	; 255
    1574:	4f e7       	ldi	r20, 0x7F	; 127
    1576:	57 e4       	ldi	r21, 0x47	; 71
    1578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    157c:	18 16       	cp	r1, r24
    157e:	4c f5       	brge	.+82     	; 0x15d2 <HMI_enterPassAfterOpt2+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1580:	69 8d       	ldd	r22, Y+25	; 0x19
    1582:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1584:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1586:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	40 e2       	ldi	r20, 0x20	; 32
    158e:	51 e4       	ldi	r21, 0x41	; 65
    1590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	bc 01       	movw	r22, r24
    159a:	cd 01       	movw	r24, r26
    159c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	9c 8b       	std	Y+20, r25	; 0x14
    15a6:	8b 8b       	std	Y+19, r24	; 0x13
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <HMI_enterPassAfterOpt2+0xc6>
    15aa:	88 ec       	ldi	r24, 0xC8	; 200
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	9a 8b       	std	Y+18, r25	; 0x12
    15b0:	89 8b       	std	Y+17, r24	; 0x11
    15b2:	89 89       	ldd	r24, Y+17	; 0x11
    15b4:	9a 89       	ldd	r25, Y+18	; 0x12
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <HMI_enterPassAfterOpt2+0xb4>
    15ba:	9a 8b       	std	Y+18, r25	; 0x12
    15bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15be:	8b 89       	ldd	r24, Y+19	; 0x13
    15c0:	9c 89       	ldd	r25, Y+20	; 0x14
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	9c 8b       	std	Y+20, r25	; 0x14
    15c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c8:	8b 89       	ldd	r24, Y+19	; 0x13
    15ca:	9c 89       	ldd	r25, Y+20	; 0x14
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	69 f7       	brne	.-38     	; 0x15aa <HMI_enterPassAfterOpt2+0xa8>
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <HMI_enterPassAfterOpt2+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d2:	6d 89       	ldd	r22, Y+21	; 0x15
    15d4:	7e 89       	ldd	r23, Y+22	; 0x16
    15d6:	8f 89       	ldd	r24, Y+23	; 0x17
    15d8:	98 8d       	ldd	r25, Y+24	; 0x18
    15da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	9c 8b       	std	Y+20, r25	; 0x14
    15e4:	8b 8b       	std	Y+19, r24	; 0x13
    15e6:	8b 89       	ldd	r24, Y+19	; 0x13
    15e8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ea:	98 8b       	std	Y+16, r25	; 0x10
    15ec:	8f 87       	std	Y+15, r24	; 0x0f
    15ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    15f0:	98 89       	ldd	r25, Y+16	; 0x10
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <HMI_enterPassAfterOpt2+0xf0>
    15f6:	98 8b       	std	Y+16, r25	; 0x10
    15f8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	LCD_clearScreen();
    15fa:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	LCD_displayString("plz enter pass: ");
    1606:	80 e6       	ldi	r24, 0x60	; 96
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
	LCD_moveCursor(1,0);
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	60 e0       	ldi	r22, 0x00	; 0
    1612:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	HMI_readyToSend(CHANGE_PASS);
    1616:	8f e0       	ldi	r24, 0x0F	; 15
    1618:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <HMI_readyToSend>
	for(uint8 i=0;i<5;i++)
    161c:	1d 8e       	std	Y+29, r1	; 0x1d
    161e:	7c c0       	rjmp	.+248    	; 0x1718 <HMI_enterPassAfterOpt2+0x216>
				{
					UART_sendByte(KEYPAD_getPressedKey());
    1620:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KEYPAD_getPressedKey>
    1624:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
					LCD_displayCharacter('*');
    1628:	8a e2       	ldi	r24, 0x2A	; 42
    162a:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_displayCharacter>
    162e:	80 e0       	ldi	r24, 0x00	; 0
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	a8 ec       	ldi	r26, 0xC8	; 200
    1634:	b3 e4       	ldi	r27, 0x43	; 67
    1636:	8b 87       	std	Y+11, r24	; 0x0b
    1638:	9c 87       	std	Y+12, r25	; 0x0c
    163a:	ad 87       	std	Y+13, r26	; 0x0d
    163c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1640:	7c 85       	ldd	r23, Y+12	; 0x0c
    1642:	8d 85       	ldd	r24, Y+13	; 0x0d
    1644:	9e 85       	ldd	r25, Y+14	; 0x0e
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	4a ef       	ldi	r20, 0xFA	; 250
    164c:	54 e4       	ldi	r21, 0x44	; 68
    164e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	8f 83       	std	Y+7, r24	; 0x07
    1658:	98 87       	std	Y+8, r25	; 0x08
    165a:	a9 87       	std	Y+9, r26	; 0x09
    165c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    165e:	6f 81       	ldd	r22, Y+7	; 0x07
    1660:	78 85       	ldd	r23, Y+8	; 0x08
    1662:	89 85       	ldd	r24, Y+9	; 0x09
    1664:	9a 85       	ldd	r25, Y+10	; 0x0a
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e8       	ldi	r20, 0x80	; 128
    166c:	5f e3       	ldi	r21, 0x3F	; 63
    166e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1672:	88 23       	and	r24, r24
    1674:	2c f4       	brge	.+10     	; 0x1680 <HMI_enterPassAfterOpt2+0x17e>
		__ticks = 1;
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	9e 83       	std	Y+6, r25	; 0x06
    167c:	8d 83       	std	Y+5, r24	; 0x05
    167e:	3f c0       	rjmp	.+126    	; 0x16fe <HMI_enterPassAfterOpt2+0x1fc>
	else if (__tmp > 65535)
    1680:	6f 81       	ldd	r22, Y+7	; 0x07
    1682:	78 85       	ldd	r23, Y+8	; 0x08
    1684:	89 85       	ldd	r24, Y+9	; 0x09
    1686:	9a 85       	ldd	r25, Y+10	; 0x0a
    1688:	20 e0       	ldi	r18, 0x00	; 0
    168a:	3f ef       	ldi	r19, 0xFF	; 255
    168c:	4f e7       	ldi	r20, 0x7F	; 127
    168e:	57 e4       	ldi	r21, 0x47	; 71
    1690:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1694:	18 16       	cp	r1, r24
    1696:	4c f5       	brge	.+82     	; 0x16ea <HMI_enterPassAfterOpt2+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1698:	6b 85       	ldd	r22, Y+11	; 0x0b
    169a:	7c 85       	ldd	r23, Y+12	; 0x0c
    169c:	8d 85       	ldd	r24, Y+13	; 0x0d
    169e:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e2       	ldi	r20, 0x20	; 32
    16a6:	51 e4       	ldi	r21, 0x41	; 65
    16a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	bc 01       	movw	r22, r24
    16b2:	cd 01       	movw	r24, r26
    16b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9e 83       	std	Y+6, r25	; 0x06
    16be:	8d 83       	std	Y+5, r24	; 0x05
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <HMI_enterPassAfterOpt2+0x1de>
    16c2:	88 ec       	ldi	r24, 0xC8	; 200
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	9c 83       	std	Y+4, r25	; 0x04
    16c8:	8b 83       	std	Y+3, r24	; 0x03
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <HMI_enterPassAfterOpt2+0x1cc>
    16d2:	9c 83       	std	Y+4, r25	; 0x04
    16d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d6:	8d 81       	ldd	r24, Y+5	; 0x05
    16d8:	9e 81       	ldd	r25, Y+6	; 0x06
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e0:	8d 81       	ldd	r24, Y+5	; 0x05
    16e2:	9e 81       	ldd	r25, Y+6	; 0x06
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	69 f7       	brne	.-38     	; 0x16c2 <HMI_enterPassAfterOpt2+0x1c0>
    16e8:	14 c0       	rjmp	.+40     	; 0x1712 <HMI_enterPassAfterOpt2+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ea:	6f 81       	ldd	r22, Y+7	; 0x07
    16ec:	78 85       	ldd	r23, Y+8	; 0x08
    16ee:	89 85       	ldd	r24, Y+9	; 0x09
    16f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9e 83       	std	Y+6, r25	; 0x06
    16fc:	8d 83       	std	Y+5, r24	; 0x05
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	9a 81       	ldd	r25, Y+2	; 0x02
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <HMI_enterPassAfterOpt2+0x208>
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("plz enter pass: ");
	LCD_moveCursor(1,0);
	HMI_readyToSend(CHANGE_PASS);
	for(uint8 i=0;i<5;i++)
    1712:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1714:	8f 5f       	subi	r24, 0xFF	; 255
    1716:	8d 8f       	std	Y+29, r24	; 0x1d
    1718:	8d 8d       	ldd	r24, Y+29	; 0x1d
    171a:	85 30       	cpi	r24, 0x05	; 5
    171c:	08 f4       	brcc	.+2      	; 0x1720 <HMI_enterPassAfterOpt2+0x21e>
    171e:	80 cf       	rjmp	.-256    	; 0x1620 <HMI_enterPassAfterOpt2+0x11e>
				{
					UART_sendByte(KEYPAD_getPressedKey());
					LCD_displayCharacter('*');
					_delay_ms(400);
				}
			while(KEYPAD_getPressedKey()!='=');
    1720:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KEYPAD_getPressedKey>
    1724:	8d 33       	cpi	r24, 0x3D	; 61
    1726:	e1 f7       	brne	.-8      	; 0x1720 <HMI_enterPassAfterOpt2+0x21e>
	LCD_clearScreen();
    1728:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
			status=HMI_readyToRecieve();
    172c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <HMI_readyToRecieve>
    1730:	80 93 fd 00 	sts	0x00FD, r24
			if(status==POSITIVE)
    1734:	80 91 fd 00 	lds	r24, 0x00FD
    1738:	80 31       	cpi	r24, 0x10	; 16
    173a:	19 f4       	brne	.+6      	; 0x1742 <HMI_enterPassAfterOpt2+0x240>
				HMI_createPass();
    173c:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_createPass>
    1740:	0e c0       	rjmp	.+28     	; 0x175e <HMI_enterPassAfterOpt2+0x25c>
			else if(status==FAIL)
    1742:	80 91 fd 00 	lds	r24, 0x00FD
    1746:	81 31       	cpi	r24, 0x11	; 17
    1748:	51 f4       	brne	.+20     	; 0x175e <HMI_enterPassAfterOpt2+0x25c>
			{
				trig=1;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	80 93 fc 00 	sts	0x00FC, r24
				alert_count++;
    1750:	80 91 f5 00 	lds	r24, 0x00F5
    1754:	8f 5f       	subi	r24, 0xFF	; 255
    1756:	80 93 f5 00 	sts	0x00F5, r24
				HMI_alertUser();
    175a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <HMI_alertUser>
			}
}
    175e:	6d 96       	adiw	r28, 0x1d	; 29
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <HMI_alertUser>:
 * on LCD the remaining trials of entering passwords, if the user enters a correct password, it then proceeds
 * to open door or change password based on the value of the variable trig described above in this file.
 * If the user enters 3 incorrect passwords, it then goes to the ALARM state.
 */
void HMI_alertUser(void)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	6d 97       	sbiw	r28, 0x1d	; 29
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a6 e9       	ldi	r26, 0x96	; 150
    178a:	b3 e4       	ldi	r27, 0x43	; 67
    178c:	89 8f       	std	Y+25, r24	; 0x19
    178e:	9a 8f       	std	Y+26, r25	; 0x1a
    1790:	ab 8f       	std	Y+27, r26	; 0x1b
    1792:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1794:	69 8d       	ldd	r22, Y+25	; 0x19
    1796:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1798:	8b 8d       	ldd	r24, Y+27	; 0x1b
    179a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	4a ef       	ldi	r20, 0xFA	; 250
    17a2:	54 e4       	ldi	r21, 0x44	; 68
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8d 8b       	std	Y+21, r24	; 0x15
    17ae:	9e 8b       	std	Y+22, r25	; 0x16
    17b0:	af 8b       	std	Y+23, r26	; 0x17
    17b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17b4:	6d 89       	ldd	r22, Y+21	; 0x15
    17b6:	7e 89       	ldd	r23, Y+22	; 0x16
    17b8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ba:	98 8d       	ldd	r25, Y+24	; 0x18
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e8       	ldi	r20, 0x80	; 128
    17c2:	5f e3       	ldi	r21, 0x3F	; 63
    17c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c8:	88 23       	and	r24, r24
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <HMI_alertUser+0x66>
		__ticks = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9c 8b       	std	Y+20, r25	; 0x14
    17d2:	8b 8b       	std	Y+19, r24	; 0x13
    17d4:	3f c0       	rjmp	.+126    	; 0x1854 <HMI_alertUser+0xe4>
	else if (__tmp > 65535)
    17d6:	6d 89       	ldd	r22, Y+21	; 0x15
    17d8:	7e 89       	ldd	r23, Y+22	; 0x16
    17da:	8f 89       	ldd	r24, Y+23	; 0x17
    17dc:	98 8d       	ldd	r25, Y+24	; 0x18
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	3f ef       	ldi	r19, 0xFF	; 255
    17e2:	4f e7       	ldi	r20, 0x7F	; 127
    17e4:	57 e4       	ldi	r21, 0x47	; 71
    17e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ea:	18 16       	cp	r1, r24
    17ec:	4c f5       	brge	.+82     	; 0x1840 <HMI_alertUser+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ee:	69 8d       	ldd	r22, Y+25	; 0x19
    17f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e2       	ldi	r20, 0x20	; 32
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9c 8b       	std	Y+20, r25	; 0x14
    1814:	8b 8b       	std	Y+19, r24	; 0x13
    1816:	0f c0       	rjmp	.+30     	; 0x1836 <HMI_alertUser+0xc6>
    1818:	88 ec       	ldi	r24, 0xC8	; 200
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9a 8b       	std	Y+18, r25	; 0x12
    181e:	89 8b       	std	Y+17, r24	; 0x11
    1820:	89 89       	ldd	r24, Y+17	; 0x11
    1822:	9a 89       	ldd	r25, Y+18	; 0x12
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <HMI_alertUser+0xb4>
    1828:	9a 8b       	std	Y+18, r25	; 0x12
    182a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182c:	8b 89       	ldd	r24, Y+19	; 0x13
    182e:	9c 89       	ldd	r25, Y+20	; 0x14
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	9c 8b       	std	Y+20, r25	; 0x14
    1834:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1836:	8b 89       	ldd	r24, Y+19	; 0x13
    1838:	9c 89       	ldd	r25, Y+20	; 0x14
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	69 f7       	brne	.-38     	; 0x1818 <HMI_alertUser+0xa8>
    183e:	14 c0       	rjmp	.+40     	; 0x1868 <HMI_alertUser+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1840:	6d 89       	ldd	r22, Y+21	; 0x15
    1842:	7e 89       	ldd	r23, Y+22	; 0x16
    1844:	8f 89       	ldd	r24, Y+23	; 0x17
    1846:	98 8d       	ldd	r25, Y+24	; 0x18
    1848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9c 8b       	std	Y+20, r25	; 0x14
    1852:	8b 8b       	std	Y+19, r24	; 0x13
    1854:	8b 89       	ldd	r24, Y+19	; 0x13
    1856:	9c 89       	ldd	r25, Y+20	; 0x14
    1858:	98 8b       	std	Y+16, r25	; 0x10
    185a:	8f 87       	std	Y+15, r24	; 0x0f
    185c:	8f 85       	ldd	r24, Y+15	; 0x0f
    185e:	98 89       	ldd	r25, Y+16	; 0x10
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <HMI_alertUser+0xf0>
    1864:	98 8b       	std	Y+16, r25	; 0x10
    1866:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(300);
	if(alert_count==3)
    1868:	80 91 f5 00 	lds	r24, 0x00F5
    186c:	83 30       	cpi	r24, 0x03	; 3
    186e:	21 f4       	brne	.+8      	; 0x1878 <HMI_alertUser+0x108>
	{
		alert_count=0;
    1870:	10 92 f5 00 	sts	0x00F5, r1
		HMI_alarm();
    1874:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <HMI_alarm>
	}
		LCD_clearScreen();
    1878:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
		LCD_displayString("plz enter pass: ");
    1884:	80 e6       	ldi	r24, 0x60	; 96
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
		LCD_moveCursor(1,0);
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	60 e0       	ldi	r22, 0x00	; 0
    1890:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
		LCD_displayString("remaining:");
    1894:	88 ea       	ldi	r24, 0xA8	; 168
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
		LCD_intgerToString(3-alert_count);
    189c:	80 91 f5 00 	lds	r24, 0x00F5
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	83 e0       	ldi	r24, 0x03	; 3
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	82 1b       	sub	r24, r18
    18aa:	93 0b       	sbc	r25, r19
    18ac:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <LCD_intgerToString>
		LCD_moveCursor(2,0);
    18b0:	82 e0       	ldi	r24, 0x02	; 2
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
		HMI_readyToSend(ALERT);
    18b8:	83 e1       	ldi	r24, 0x13	; 19
    18ba:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <HMI_readyToSend>
		for(uint8 i=0;i<5;i++)
    18be:	1d 8e       	std	Y+29, r1	; 0x1d
    18c0:	7c c0       	rjmp	.+248    	; 0x19ba <HMI_alertUser+0x24a>
						{
							UART_sendByte(KEYPAD_getPressedKey());
    18c2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KEYPAD_getPressedKey>
    18c6:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
							LCD_displayCharacter('*');
    18ca:	8a e2       	ldi	r24, 0x2A	; 42
    18cc:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_displayCharacter>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a8 ec       	ldi	r26, 0xC8	; 200
    18d6:	b3 e4       	ldi	r27, 0x43	; 67
    18d8:	8b 87       	std	Y+11, r24	; 0x0b
    18da:	9c 87       	std	Y+12, r25	; 0x0c
    18dc:	ad 87       	std	Y+13, r26	; 0x0d
    18de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a ef       	ldi	r20, 0xFA	; 250
    18ee:	54 e4       	ldi	r21, 0x44	; 68
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8f 83       	std	Y+7, r24	; 0x07
    18fa:	98 87       	std	Y+8, r25	; 0x08
    18fc:	a9 87       	std	Y+9, r26	; 0x09
    18fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	2c f4       	brge	.+10     	; 0x1922 <HMI_alertUser+0x1b2>
		__ticks = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	3f c0       	rjmp	.+126    	; 0x19a0 <HMI_alertUser+0x230>
	else if (__tmp > 65535)
    1922:	6f 81       	ldd	r22, Y+7	; 0x07
    1924:	78 85       	ldd	r23, Y+8	; 0x08
    1926:	89 85       	ldd	r24, Y+9	; 0x09
    1928:	9a 85       	ldd	r25, Y+10	; 0x0a
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	4c f5       	brge	.+82     	; 0x198c <HMI_alertUser+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193a:	6b 85       	ldd	r22, Y+11	; 0x0b
    193c:	7c 85       	ldd	r23, Y+12	; 0x0c
    193e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1940:	9e 85       	ldd	r25, Y+14	; 0x0e
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <HMI_alertUser+0x212>
    1964:	88 ec       	ldi	r24, 0xC8	; 200
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <HMI_alertUser+0x200>
    1974:	9c 83       	std	Y+4, r25	; 0x04
    1976:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	69 f7       	brne	.-38     	; 0x1964 <HMI_alertUser+0x1f4>
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <HMI_alertUser+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <HMI_alertUser+0x23c>
    19b0:	9a 83       	std	Y+2, r25	; 0x02
    19b2:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(1,0);
		LCD_displayString("remaining:");
		LCD_intgerToString(3-alert_count);
		LCD_moveCursor(2,0);
		HMI_readyToSend(ALERT);
		for(uint8 i=0;i<5;i++)
    19b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
    19b8:	8d 8f       	std	Y+29, r24	; 0x1d
    19ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19bc:	85 30       	cpi	r24, 0x05	; 5
    19be:	08 f4       	brcc	.+2      	; 0x19c2 <HMI_alertUser+0x252>
    19c0:	80 cf       	rjmp	.-256    	; 0x18c2 <HMI_alertUser+0x152>
						{
							UART_sendByte(KEYPAD_getPressedKey());
							LCD_displayCharacter('*');
							_delay_ms(400);
						}
					while(KEYPAD_getPressedKey()!='=');
    19c2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <KEYPAD_getPressedKey>
    19c6:	8d 33       	cpi	r24, 0x3D	; 61
    19c8:	e1 f7       	brne	.-8      	; 0x19c2 <HMI_alertUser+0x252>
			LCD_clearScreen();
    19ca:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
					status=HMI_readyToRecieve();
    19ce:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <HMI_readyToRecieve>
    19d2:	80 93 fd 00 	sts	0x00FD, r24
					if(status==POSITIVE&&trig==0)
    19d6:	80 91 fd 00 	lds	r24, 0x00FD
    19da:	80 31       	cpi	r24, 0x10	; 16
    19dc:	49 f4       	brne	.+18     	; 0x19f0 <HMI_alertUser+0x280>
    19de:	80 91 fc 00 	lds	r24, 0x00FC
    19e2:	88 23       	and	r24, r24
    19e4:	29 f4       	brne	.+10     	; 0x19f0 <HMI_alertUser+0x280>
					{
                        alert_count=0;
    19e6:	10 92 f5 00 	sts	0x00F5, r1
						HMI_openingDoor();
    19ea:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <HMI_openingDoor>
    19ee:	18 c0       	rjmp	.+48     	; 0x1a20 <HMI_alertUser+0x2b0>
					}
					else if(status==POSITIVE&&trig==1)
    19f0:	80 91 fd 00 	lds	r24, 0x00FD
    19f4:	80 31       	cpi	r24, 0x10	; 16
    19f6:	49 f4       	brne	.+18     	; 0x1a0a <HMI_alertUser+0x29a>
    19f8:	80 91 fc 00 	lds	r24, 0x00FC
    19fc:	81 30       	cpi	r24, 0x01	; 1
    19fe:	29 f4       	brne	.+10     	; 0x1a0a <HMI_alertUser+0x29a>
					{
						alert_count=0;
    1a00:	10 92 f5 00 	sts	0x00F5, r1
						HMI_enterPassAfterOpt2();
    1a04:	0e 94 81 0a 	call	0x1502	; 0x1502 <HMI_enterPassAfterOpt2>
    1a08:	0b c0       	rjmp	.+22     	; 0x1a20 <HMI_alertUser+0x2b0>
					}
					else if(status==FAIL)
    1a0a:	80 91 fd 00 	lds	r24, 0x00FD
    1a0e:	81 31       	cpi	r24, 0x11	; 17
    1a10:	39 f4       	brne	.+14     	; 0x1a20 <HMI_alertUser+0x2b0>
					{
						alert_count++;
    1a12:	80 91 f5 00 	lds	r24, 0x00F5
    1a16:	8f 5f       	subi	r24, 0xFF	; 255
    1a18:	80 93 f5 00 	sts	0x00F5, r24
						HMI_alertUser();
    1a1c:	0e 94 b8 0b 	call	0x1770	; 0x1770 <HMI_alertUser>
					}
}
    1a20:	6d 96       	adiw	r28, 0x1d	; 29
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	de bf       	out	0x3e, r29	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	cd bf       	out	0x3d, r28	; 61
    1a2c:	cf 91       	pop	r28
    1a2e:	df 91       	pop	r29
    1a30:	08 95       	ret

00001a32 <HMI_openingDoor>:
 * Same timer1 driver implemented in CONTROL MCU using dynamic configuration and callback technique, it is
 * disabled after successfully opening the door and re-initialized if opening the door is requested by
 * the user.
 */
void HMI_openingDoor(void)
{
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	2b 97       	sbiw	r28, 0x0b	; 11
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
	HMI_readyToSend(OPENING_DOOR);
    1a46:	84 e1       	ldi	r24, 0x14	; 20
    1a48:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <HMI_readyToSend>
	Timer1_ConfigType TIMER1_Config={0,31250,PS_256,CTC};
    1a4c:	ce 01       	movw	r24, r28
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	98 87       	std	Y+8, r25	; 0x08
    1a52:	8f 83       	std	Y+7, r24	; 0x07
    1a54:	e1 ee       	ldi	r30, 0xE1	; 225
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	fa 87       	std	Y+10, r31	; 0x0a
    1a5a:	e9 87       	std	Y+9, r30	; 0x09
    1a5c:	f6 e0       	ldi	r31, 0x06	; 6
    1a5e:	fb 87       	std	Y+11, r31	; 0x0b
    1a60:	e9 85       	ldd	r30, Y+9	; 0x09
    1a62:	fa 85       	ldd	r31, Y+10	; 0x0a
    1a64:	00 80       	ld	r0, Z
    1a66:	89 85       	ldd	r24, Y+9	; 0x09
    1a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6a:	01 96       	adiw	r24, 0x01	; 1
    1a6c:	9a 87       	std	Y+10, r25	; 0x0a
    1a6e:	89 87       	std	Y+9, r24	; 0x09
    1a70:	ef 81       	ldd	r30, Y+7	; 0x07
    1a72:	f8 85       	ldd	r31, Y+8	; 0x08
    1a74:	00 82       	st	Z, r0
    1a76:	8f 81       	ldd	r24, Y+7	; 0x07
    1a78:	98 85       	ldd	r25, Y+8	; 0x08
    1a7a:	01 96       	adiw	r24, 0x01	; 1
    1a7c:	98 87       	std	Y+8, r25	; 0x08
    1a7e:	8f 83       	std	Y+7, r24	; 0x07
    1a80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a82:	91 50       	subi	r25, 0x01	; 1
    1a84:	9b 87       	std	Y+11, r25	; 0x0b
    1a86:	eb 85       	ldd	r30, Y+11	; 0x0b
    1a88:	ee 23       	and	r30, r30
    1a8a:	51 f7       	brne	.-44     	; 0x1a60 <HMI_openingDoor+0x2e>
	TIMER1_init(&TIMER1_Config);
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	01 96       	adiw	r24, 0x01	; 1
    1a90:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER1_init>
	TIMER1_setCallBack(HMI_countTime);
    1a94:	84 ee       	ldi	r24, 0xE4	; 228
    1a96:	9d e0       	ldi	r25, 0x0D	; 13
    1a98:	0e 94 95 18 	call	0x312a	; 0x312a <TIMER1_setCallBack>
	LCD_clearScreen();
    1a9c:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	60 e0       	ldi	r22, 0x00	; 0
    1aa4:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
    1aa8:	08 c0       	rjmp	.+16     	; 0x1aba <HMI_openingDoor+0x88>
	while(count!=15)
	{
		LCD_displayString("Door is opening");
    1aaa:	83 eb       	ldi	r24, 0xB3	; 179
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
		LCD_moveCursor(0,0);
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	60 e0       	ldi	r22, 0x00	; 0
    1ab6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	Timer1_ConfigType TIMER1_Config={0,31250,PS_256,CTC};
	TIMER1_init(&TIMER1_Config);
	TIMER1_setCallBack(HMI_countTime);
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	while(count!=15)
    1aba:	80 91 f4 00 	lds	r24, 0x00F4
    1abe:	8f 30       	cpi	r24, 0x0F	; 15
    1ac0:	a1 f7       	brne	.-24     	; 0x1aaa <HMI_openingDoor+0x78>
	{
		LCD_displayString("Door is opening");
		LCD_moveCursor(0,0);
	}
	count=0;
    1ac2:	10 92 f4 00 	sts	0x00F4, r1
	while(count!=3);
    1ac6:	80 91 f4 00 	lds	r24, 0x00F4
    1aca:	83 30       	cpi	r24, 0x03	; 3
    1acc:	e1 f7       	brne	.-8      	; 0x1ac6 <HMI_openingDoor+0x94>
	LCD_clearScreen();
    1ace:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	60 e0       	ldi	r22, 0x00	; 0
    1ad6:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	count=0;
    1ada:	10 92 f4 00 	sts	0x00F4, r1
    1ade:	08 c0       	rjmp	.+16     	; 0x1af0 <HMI_openingDoor+0xbe>
	while(count!=15)
	{
		LCD_displayString("Door is Locking");
    1ae0:	83 ec       	ldi	r24, 0xC3	; 195
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
		LCD_moveCursor(0,0);
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	count=0;
	while(count!=3);
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	count=0;
	while(count!=15)
    1af0:	80 91 f4 00 	lds	r24, 0x00F4
    1af4:	8f 30       	cpi	r24, 0x0F	; 15
    1af6:	a1 f7       	brne	.-24     	; 0x1ae0 <HMI_openingDoor+0xae>
	{
		LCD_displayString("Door is Locking");
		LCD_moveCursor(0,0);
	}
	LCD_clearScreen();
    1af8:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
	TIMER1_deInit();
    1afc:	0e 94 85 18 	call	0x310a	; 0x310a <TIMER1_deInit>
	count=0;
    1b00:	10 92 f4 00 	sts	0x00F4, r1
	HMI_displayOpt();
    1b04:	0e 94 82 08 	call	0x1104	; 0x1104 <HMI_displayOpt>
}
    1b08:	2b 96       	adiw	r28, 0x0b	; 11
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <HMI_alarm>:
 * It is the alarm state, where it displays ERROR on LCD, stops from taking and inputs from keypad,
 * and signals the CONTROL MCU to begin activating the buzzer for 1min while displaying the error message,
 * to signal that the passwords have been incorrectly entered.
 */
void HMI_alarm(void)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	2b 97       	sbiw	r28, 0x0b	; 11
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
	HMI_readyToSend(ALARM);
    1b2e:	85 e1       	ldi	r24, 0x15	; 21
    1b30:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <HMI_readyToSend>
	Timer1_ConfigType TIMER1_Config={0,31250,PS_256,CTC};
    1b34:	ce 01       	movw	r24, r28
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	98 87       	std	Y+8, r25	; 0x08
    1b3a:	8f 83       	std	Y+7, r24	; 0x07
    1b3c:	e7 ee       	ldi	r30, 0xE7	; 231
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	fa 87       	std	Y+10, r31	; 0x0a
    1b42:	e9 87       	std	Y+9, r30	; 0x09
    1b44:	f6 e0       	ldi	r31, 0x06	; 6
    1b46:	fb 87       	std	Y+11, r31	; 0x0b
    1b48:	e9 85       	ldd	r30, Y+9	; 0x09
    1b4a:	fa 85       	ldd	r31, Y+10	; 0x0a
    1b4c:	00 80       	ld	r0, Z
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	01 96       	adiw	r24, 0x01	; 1
    1b54:	9a 87       	std	Y+10, r25	; 0x0a
    1b56:	89 87       	std	Y+9, r24	; 0x09
    1b58:	ef 81       	ldd	r30, Y+7	; 0x07
    1b5a:	f8 85       	ldd	r31, Y+8	; 0x08
    1b5c:	00 82       	st	Z, r0
    1b5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b60:	98 85       	ldd	r25, Y+8	; 0x08
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	98 87       	std	Y+8, r25	; 0x08
    1b66:	8f 83       	std	Y+7, r24	; 0x07
    1b68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b6a:	91 50       	subi	r25, 0x01	; 1
    1b6c:	9b 87       	std	Y+11, r25	; 0x0b
    1b6e:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b70:	ee 23       	and	r30, r30
    1b72:	51 f7       	brne	.-44     	; 0x1b48 <HMI_alarm+0x2e>
		TIMER1_init(&TIMER1_Config);
    1b74:	ce 01       	movw	r24, r28
    1b76:	01 96       	adiw	r24, 0x01	; 1
    1b78:	0e 94 1e 18 	call	0x303c	; 0x303c <TIMER1_init>
		TIMER1_setCallBack(HMI_countTime);
    1b7c:	84 ee       	ldi	r24, 0xE4	; 228
    1b7e:	9d e0       	ldi	r25, 0x0D	; 13
    1b80:	0e 94 95 18 	call	0x312a	; 0x312a <TIMER1_setCallBack>
		LCD_clearScreen();
    1b84:	0e 94 14 18 	call	0x3028	; 0x3028 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    1b88:	80 e0       	ldi	r24, 0x00	; 0
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
    1b90:	08 c0       	rjmp	.+16     	; 0x1ba2 <HMI_alarm+0x88>
		while(count!=60)
		{
			LCD_displayString("ERROR");
    1b92:	83 ed       	ldi	r24, 0xD3	; 211
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
			LCD_moveCursor(0,0);
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	Timer1_ConfigType TIMER1_Config={0,31250,PS_256,CTC};
		TIMER1_init(&TIMER1_Config);
		TIMER1_setCallBack(HMI_countTime);
		LCD_clearScreen();
		LCD_moveCursor(0,0);
		while(count!=60)
    1ba2:	80 91 f4 00 	lds	r24, 0x00F4
    1ba6:	8c 33       	cpi	r24, 0x3C	; 60
    1ba8:	a1 f7       	brne	.-24     	; 0x1b92 <HMI_alarm+0x78>
		{
			LCD_displayString("ERROR");
			LCD_moveCursor(0,0);
		}
		count=0;
    1baa:	10 92 f4 00 	sts	0x00F4, r1
		TIMER1_deInit();
    1bae:	0e 94 85 18 	call	0x310a	; 0x310a <TIMER1_deInit>
		HMI_displayOpt();
    1bb2:	0e 94 82 08 	call	0x1104	; 0x1104 <HMI_displayOpt>
}
    1bb6:	2b 96       	adiw	r28, 0x0b	; 11
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	de bf       	out	0x3e, r29	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	cd bf       	out	0x3d, r28	; 61
    1bc2:	cf 91       	pop	r28
    1bc4:	df 91       	pop	r29
    1bc6:	08 95       	ret

00001bc8 <HMI_countTime>:
/*
 * Function description:
 * Function that counts time, configured by the call back technique.
 */
void HMI_countTime(void)
{
    1bc8:	df 93       	push	r29
    1bca:	cf 93       	push	r28
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
	count++;
    1bd0:	80 91 f4 00 	lds	r24, 0x00F4
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	80 93 f4 00 	sts	0x00F4, r24
}
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <main>:
int main()
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	2c 97       	sbiw	r28, 0x0c	; 12
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7);//enabling global interrupt, I-bit
    1bf4:	af e5       	ldi	r26, 0x5F	; 95
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	ef e5       	ldi	r30, 0x5F	; 95
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	80 68       	ori	r24, 0x80	; 128
    1c00:	8c 93       	st	X, r24
	UART_ConfigType UART_Config={EIGHT_BIT,DISABLED,ONE_BIT,BR_9600};//Configuration of UART with 9600 baud rate
    1c02:	ce 01       	movw	r24, r28
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	99 87       	std	Y+9, r25	; 0x09
    1c08:	88 87       	std	Y+8, r24	; 0x08
    1c0a:	ed ee       	ldi	r30, 0xED	; 237
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	fb 87       	std	Y+11, r31	; 0x0b
    1c10:	ea 87       	std	Y+10, r30	; 0x0a
    1c12:	f7 e0       	ldi	r31, 0x07	; 7
    1c14:	fc 87       	std	Y+12, r31	; 0x0c
    1c16:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c18:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c1a:	00 80       	ld	r0, Z
    1c1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	9b 87       	std	Y+11, r25	; 0x0b
    1c24:	8a 87       	std	Y+10, r24	; 0x0a
    1c26:	e8 85       	ldd	r30, Y+8	; 0x08
    1c28:	f9 85       	ldd	r31, Y+9	; 0x09
    1c2a:	00 82       	st	Z, r0
    1c2c:	88 85       	ldd	r24, Y+8	; 0x08
    1c2e:	99 85       	ldd	r25, Y+9	; 0x09
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	99 87       	std	Y+9, r25	; 0x09
    1c34:	88 87       	std	Y+8, r24	; 0x08
    1c36:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c38:	91 50       	subi	r25, 0x01	; 1
    1c3a:	9c 87       	std	Y+12, r25	; 0x0c
    1c3c:	ec 85       	ldd	r30, Y+12	; 0x0c
    1c3e:	ee 23       	and	r30, r30
    1c40:	51 f7       	brne	.-44     	; 0x1c16 <main+0x36>
	UART_init(&UART_Config);
    1c42:	ce 01       	movw	r24, r28
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	0e 94 0d 19 	call	0x321a	; 0x321a <UART_init>
	LCD_init();//initialize lcd
    1c4a:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <LCD_init>
	HMI_createPass();//Function called only one time because the programs loops around different function after that.
    1c4e:	0e 94 a3 05 	call	0xb46	; 0xb46 <HMI_createPass>
    1c52:	ff cf       	rjmp	.-2      	; 0x1c52 <main+0x72>

00001c54 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <GPIO_setupPinDirection+0x6>
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <GPIO_setupPinDirection+0x8>
    1c5c:	0f 92       	push	r0
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	6a 83       	std	Y+2, r22	; 0x02
    1c66:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	88 30       	cpi	r24, 0x08	; 8
    1c6c:	08 f0       	brcs	.+2      	; 0x1c70 <GPIO_setupPinDirection+0x1c>
    1c6e:	d5 c0       	rjmp	.+426    	; 0x1e1a <GPIO_setupPinDirection+0x1c6>
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	84 30       	cpi	r24, 0x04	; 4
    1c74:	08 f0       	brcs	.+2      	; 0x1c78 <GPIO_setupPinDirection+0x24>
    1c76:	d1 c0       	rjmp	.+418    	; 0x1e1a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	3d 83       	std	Y+5, r19	; 0x05
    1c80:	2c 83       	std	Y+4, r18	; 0x04
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	9d 81       	ldd	r25, Y+5	; 0x05
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	91 05       	cpc	r25, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <GPIO_setupPinDirection+0x3a>
    1c8c:	43 c0       	rjmp	.+134    	; 0x1d14 <GPIO_setupPinDirection+0xc0>
    1c8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c90:	3d 81       	ldd	r19, Y+5	; 0x05
    1c92:	22 30       	cpi	r18, 0x02	; 2
    1c94:	31 05       	cpc	r19, r1
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <GPIO_setupPinDirection+0x4e>
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	71 f0       	breq	.+28     	; 0x1cbc <GPIO_setupPinDirection+0x68>
    1ca0:	bc c0       	rjmp	.+376    	; 0x1e1a <GPIO_setupPinDirection+0x1c6>
    1ca2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ca6:	22 30       	cpi	r18, 0x02	; 2
    1ca8:	31 05       	cpc	r19, r1
    1caa:	09 f4       	brne	.+2      	; 0x1cae <GPIO_setupPinDirection+0x5a>
    1cac:	5f c0       	rjmp	.+190    	; 0x1d6c <GPIO_setupPinDirection+0x118>
    1cae:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb2:	83 30       	cpi	r24, 0x03	; 3
    1cb4:	91 05       	cpc	r25, r1
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <GPIO_setupPinDirection+0x66>
    1cb8:	85 c0       	rjmp	.+266    	; 0x1dc4 <GPIO_setupPinDirection+0x170>
    1cba:	af c0       	rjmp	.+350    	; 0x1e1a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	81 30       	cpi	r24, 0x01	; 1
    1cc0:	a1 f4       	brne	.+40     	; 0x1cea <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1cc2:	aa e3       	ldi	r26, 0x3A	; 58
    1cc4:	b0 e0       	ldi	r27, 0x00	; 0
    1cc6:	ea e3       	ldi	r30, 0x3A	; 58
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	80 81       	ld	r24, Z
    1ccc:	48 2f       	mov	r20, r24
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	02 2e       	mov	r0, r18
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <GPIO_setupPinDirection+0x8c>
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	0a 94       	dec	r0
    1ce2:	e2 f7       	brpl	.-8      	; 0x1cdc <GPIO_setupPinDirection+0x88>
    1ce4:	84 2b       	or	r24, r20
    1ce6:	8c 93       	st	X, r24
    1ce8:	98 c0       	rjmp	.+304    	; 0x1e1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1cea:	aa e3       	ldi	r26, 0x3A	; 58
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	ea e3       	ldi	r30, 0x3A	; 58
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	48 2f       	mov	r20, r24
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	28 2f       	mov	r18, r24
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	02 2e       	mov	r0, r18
    1d02:	02 c0       	rjmp	.+4      	; 0x1d08 <GPIO_setupPinDirection+0xb4>
    1d04:	88 0f       	add	r24, r24
    1d06:	99 1f       	adc	r25, r25
    1d08:	0a 94       	dec	r0
    1d0a:	e2 f7       	brpl	.-8      	; 0x1d04 <GPIO_setupPinDirection+0xb0>
    1d0c:	80 95       	com	r24
    1d0e:	84 23       	and	r24, r20
    1d10:	8c 93       	st	X, r24
    1d12:	83 c0       	rjmp	.+262    	; 0x1e1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	81 30       	cpi	r24, 0x01	; 1
    1d18:	a1 f4       	brne	.+40     	; 0x1d42 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d1a:	a7 e3       	ldi	r26, 0x37	; 55
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e7 e3       	ldi	r30, 0x37	; 55
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	48 2f       	mov	r20, r24
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 2e       	mov	r0, r18
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <GPIO_setupPinDirection+0xe4>
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	0a 94       	dec	r0
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <GPIO_setupPinDirection+0xe0>
    1d3c:	84 2b       	or	r24, r20
    1d3e:	8c 93       	st	X, r24
    1d40:	6c c0       	rjmp	.+216    	; 0x1e1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d42:	a7 e3       	ldi	r26, 0x37	; 55
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e7 e3       	ldi	r30, 0x37	; 55
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	48 2f       	mov	r20, r24
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	28 2f       	mov	r18, r24
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	02 2e       	mov	r0, r18
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <GPIO_setupPinDirection+0x10c>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	0a 94       	dec	r0
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <GPIO_setupPinDirection+0x108>
    1d64:	80 95       	com	r24
    1d66:	84 23       	and	r24, r20
    1d68:	8c 93       	st	X, r24
    1d6a:	57 c0       	rjmp	.+174    	; 0x1e1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	a1 f4       	brne	.+40     	; 0x1d9a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d72:	a4 e3       	ldi	r26, 0x34	; 52
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e4 e3       	ldi	r30, 0x34	; 52
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <GPIO_setupPinDirection+0x13c>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <GPIO_setupPinDirection+0x138>
    1d94:	84 2b       	or	r24, r20
    1d96:	8c 93       	st	X, r24
    1d98:	40 c0       	rjmp	.+128    	; 0x1e1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d9a:	a4 e3       	ldi	r26, 0x34	; 52
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e4 e3       	ldi	r30, 0x34	; 52
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <GPIO_setupPinDirection+0x164>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <GPIO_setupPinDirection+0x160>
    1dbc:	80 95       	com	r24
    1dbe:	84 23       	and	r24, r20
    1dc0:	8c 93       	st	X, r24
    1dc2:	2b c0       	rjmp	.+86     	; 0x1e1a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	81 30       	cpi	r24, 0x01	; 1
    1dc8:	a1 f4       	brne	.+40     	; 0x1df2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1dca:	a1 e3       	ldi	r26, 0x31	; 49
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e1 e3       	ldi	r30, 0x31	; 49
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	48 2f       	mov	r20, r24
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 2e       	mov	r0, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <GPIO_setupPinDirection+0x194>
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	0a 94       	dec	r0
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <GPIO_setupPinDirection+0x190>
    1dec:	84 2b       	or	r24, r20
    1dee:	8c 93       	st	X, r24
    1df0:	14 c0       	rjmp	.+40     	; 0x1e1a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1df2:	a1 e3       	ldi	r26, 0x31	; 49
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	e1 e3       	ldi	r30, 0x31	; 49
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	48 2f       	mov	r20, r24
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	28 2f       	mov	r18, r24
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	02 2e       	mov	r0, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <GPIO_setupPinDirection+0x1bc>
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	0a 94       	dec	r0
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <GPIO_setupPinDirection+0x1b8>
    1e14:	80 95       	com	r24
    1e16:	84 23       	and	r24, r20
    1e18:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	cf 91       	pop	r28
    1e26:	df 91       	pop	r29
    1e28:	08 95       	ret

00001e2a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e2a:	df 93       	push	r29
    1e2c:	cf 93       	push	r28
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <GPIO_writePin+0x6>
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <GPIO_writePin+0x8>
    1e32:	0f 92       	push	r0
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	6a 83       	std	Y+2, r22	; 0x02
    1e3c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	88 30       	cpi	r24, 0x08	; 8
    1e42:	08 f0       	brcs	.+2      	; 0x1e46 <GPIO_writePin+0x1c>
    1e44:	d5 c0       	rjmp	.+426    	; 0x1ff0 <GPIO_writePin+0x1c6>
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	84 30       	cpi	r24, 0x04	; 4
    1e4a:	08 f0       	brcs	.+2      	; 0x1e4e <GPIO_writePin+0x24>
    1e4c:	d1 c0       	rjmp	.+418    	; 0x1ff0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	3d 83       	std	Y+5, r19	; 0x05
    1e56:	2c 83       	std	Y+4, r18	; 0x04
    1e58:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	91 05       	cpc	r25, r1
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <GPIO_writePin+0x3a>
    1e62:	43 c0       	rjmp	.+134    	; 0x1eea <GPIO_writePin+0xc0>
    1e64:	2c 81       	ldd	r18, Y+4	; 0x04
    1e66:	3d 81       	ldd	r19, Y+5	; 0x05
    1e68:	22 30       	cpi	r18, 0x02	; 2
    1e6a:	31 05       	cpc	r19, r1
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <GPIO_writePin+0x4e>
    1e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e70:	9d 81       	ldd	r25, Y+5	; 0x05
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	71 f0       	breq	.+28     	; 0x1e92 <GPIO_writePin+0x68>
    1e76:	bc c0       	rjmp	.+376    	; 0x1ff0 <GPIO_writePin+0x1c6>
    1e78:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e7c:	22 30       	cpi	r18, 0x02	; 2
    1e7e:	31 05       	cpc	r19, r1
    1e80:	09 f4       	brne	.+2      	; 0x1e84 <GPIO_writePin+0x5a>
    1e82:	5f c0       	rjmp	.+190    	; 0x1f42 <GPIO_writePin+0x118>
    1e84:	8c 81       	ldd	r24, Y+4	; 0x04
    1e86:	9d 81       	ldd	r25, Y+5	; 0x05
    1e88:	83 30       	cpi	r24, 0x03	; 3
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <GPIO_writePin+0x66>
    1e8e:	85 c0       	rjmp	.+266    	; 0x1f9a <GPIO_writePin+0x170>
    1e90:	af c0       	rjmp	.+350    	; 0x1ff0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	81 30       	cpi	r24, 0x01	; 1
    1e96:	a1 f4       	brne	.+40     	; 0x1ec0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e98:	ab e3       	ldi	r26, 0x3B	; 59
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	eb e3       	ldi	r30, 0x3B	; 59
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	48 2f       	mov	r20, r24
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 2e       	mov	r0, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <GPIO_writePin+0x8c>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	0a 94       	dec	r0
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <GPIO_writePin+0x88>
    1eba:	84 2b       	or	r24, r20
    1ebc:	8c 93       	st	X, r24
    1ebe:	98 c0       	rjmp	.+304    	; 0x1ff0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ec0:	ab e3       	ldi	r26, 0x3B	; 59
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	eb e3       	ldi	r30, 0x3B	; 59
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 2e       	mov	r0, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <GPIO_writePin+0xb4>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	0a 94       	dec	r0
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <GPIO_writePin+0xb0>
    1ee2:	80 95       	com	r24
    1ee4:	84 23       	and	r24, r20
    1ee6:	8c 93       	st	X, r24
    1ee8:	83 c0       	rjmp	.+262    	; 0x1ff0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1eea:	8b 81       	ldd	r24, Y+3	; 0x03
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	a1 f4       	brne	.+40     	; 0x1f18 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ef0:	a8 e3       	ldi	r26, 0x38	; 56
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e8 e3       	ldi	r30, 0x38	; 56
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	48 2f       	mov	r20, r24
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	02 2e       	mov	r0, r18
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <GPIO_writePin+0xe4>
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	0a 94       	dec	r0
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <GPIO_writePin+0xe0>
    1f12:	84 2b       	or	r24, r20
    1f14:	8c 93       	st	X, r24
    1f16:	6c c0       	rjmp	.+216    	; 0x1ff0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f18:	a8 e3       	ldi	r26, 0x38	; 56
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e8 e3       	ldi	r30, 0x38	; 56
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	48 2f       	mov	r20, r24
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	02 2e       	mov	r0, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <GPIO_writePin+0x10c>
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	0a 94       	dec	r0
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <GPIO_writePin+0x108>
    1f3a:	80 95       	com	r24
    1f3c:	84 23       	and	r24, r20
    1f3e:	8c 93       	st	X, r24
    1f40:	57 c0       	rjmp	.+174    	; 0x1ff0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	a1 f4       	brne	.+40     	; 0x1f70 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f48:	a5 e3       	ldi	r26, 0x35	; 53
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e5 e3       	ldi	r30, 0x35	; 53
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	48 2f       	mov	r20, r24
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	02 2e       	mov	r0, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <GPIO_writePin+0x13c>
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	0a 94       	dec	r0
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <GPIO_writePin+0x138>
    1f6a:	84 2b       	or	r24, r20
    1f6c:	8c 93       	st	X, r24
    1f6e:	40 c0       	rjmp	.+128    	; 0x1ff0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f70:	a5 e3       	ldi	r26, 0x35	; 53
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	e5 e3       	ldi	r30, 0x35	; 53
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	48 2f       	mov	r20, r24
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	02 2e       	mov	r0, r18
    1f88:	02 c0       	rjmp	.+4      	; 0x1f8e <GPIO_writePin+0x164>
    1f8a:	88 0f       	add	r24, r24
    1f8c:	99 1f       	adc	r25, r25
    1f8e:	0a 94       	dec	r0
    1f90:	e2 f7       	brpl	.-8      	; 0x1f8a <GPIO_writePin+0x160>
    1f92:	80 95       	com	r24
    1f94:	84 23       	and	r24, r20
    1f96:	8c 93       	st	X, r24
    1f98:	2b c0       	rjmp	.+86     	; 0x1ff0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	81 30       	cpi	r24, 0x01	; 1
    1f9e:	a1 f4       	brne	.+40     	; 0x1fc8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1fa0:	a2 e3       	ldi	r26, 0x32	; 50
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e2 e3       	ldi	r30, 0x32	; 50
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 81       	ld	r24, Z
    1faa:	48 2f       	mov	r20, r24
    1fac:	8a 81       	ldd	r24, Y+2	; 0x02
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	02 2e       	mov	r0, r18
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <GPIO_writePin+0x194>
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	0a 94       	dec	r0
    1fc0:	e2 f7       	brpl	.-8      	; 0x1fba <GPIO_writePin+0x190>
    1fc2:	84 2b       	or	r24, r20
    1fc4:	8c 93       	st	X, r24
    1fc6:	14 c0       	rjmp	.+40     	; 0x1ff0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1fc8:	a2 e3       	ldi	r26, 0x32	; 50
    1fca:	b0 e0       	ldi	r27, 0x00	; 0
    1fcc:	e2 e3       	ldi	r30, 0x32	; 50
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	80 81       	ld	r24, Z
    1fd2:	48 2f       	mov	r20, r24
    1fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	02 2e       	mov	r0, r18
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <GPIO_writePin+0x1bc>
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	0a 94       	dec	r0
    1fe8:	e2 f7       	brpl	.-8      	; 0x1fe2 <GPIO_writePin+0x1b8>
    1fea:	80 95       	com	r24
    1fec:	84 23       	and	r24, r20
    1fee:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ff0:	0f 90       	pop	r0
    1ff2:	0f 90       	pop	r0
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <GPIO_readPin+0x6>
    2006:	00 d0       	rcall	.+0      	; 0x2008 <GPIO_readPin+0x8>
    2008:	0f 92       	push	r0
    200a:	cd b7       	in	r28, 0x3d	; 61
    200c:	de b7       	in	r29, 0x3e	; 62
    200e:	8a 83       	std	Y+2, r24	; 0x02
    2010:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2012:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	88 30       	cpi	r24, 0x08	; 8
    2018:	08 f0       	brcs	.+2      	; 0x201c <GPIO_readPin+0x1c>
    201a:	84 c0       	rjmp	.+264    	; 0x2124 <GPIO_readPin+0x124>
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	84 30       	cpi	r24, 0x04	; 4
    2020:	08 f0       	brcs	.+2      	; 0x2024 <GPIO_readPin+0x24>
    2022:	80 c0       	rjmp	.+256    	; 0x2124 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2024:	8a 81       	ldd	r24, Y+2	; 0x02
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	3d 83       	std	Y+5, r19	; 0x05
    202c:	2c 83       	std	Y+4, r18	; 0x04
    202e:	4c 81       	ldd	r20, Y+4	; 0x04
    2030:	5d 81       	ldd	r21, Y+5	; 0x05
    2032:	41 30       	cpi	r20, 0x01	; 1
    2034:	51 05       	cpc	r21, r1
    2036:	79 f1       	breq	.+94     	; 0x2096 <GPIO_readPin+0x96>
    2038:	8c 81       	ldd	r24, Y+4	; 0x04
    203a:	9d 81       	ldd	r25, Y+5	; 0x05
    203c:	82 30       	cpi	r24, 0x02	; 2
    203e:	91 05       	cpc	r25, r1
    2040:	34 f4       	brge	.+12     	; 0x204e <GPIO_readPin+0x4e>
    2042:	2c 81       	ldd	r18, Y+4	; 0x04
    2044:	3d 81       	ldd	r19, Y+5	; 0x05
    2046:	21 15       	cp	r18, r1
    2048:	31 05       	cpc	r19, r1
    204a:	69 f0       	breq	.+26     	; 0x2066 <GPIO_readPin+0x66>
    204c:	6b c0       	rjmp	.+214    	; 0x2124 <GPIO_readPin+0x124>
    204e:	4c 81       	ldd	r20, Y+4	; 0x04
    2050:	5d 81       	ldd	r21, Y+5	; 0x05
    2052:	42 30       	cpi	r20, 0x02	; 2
    2054:	51 05       	cpc	r21, r1
    2056:	b9 f1       	breq	.+110    	; 0x20c6 <GPIO_readPin+0xc6>
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	9d 81       	ldd	r25, Y+5	; 0x05
    205c:	83 30       	cpi	r24, 0x03	; 3
    205e:	91 05       	cpc	r25, r1
    2060:	09 f4       	brne	.+2      	; 0x2064 <GPIO_readPin+0x64>
    2062:	49 c0       	rjmp	.+146    	; 0x20f6 <GPIO_readPin+0xf6>
    2064:	5f c0       	rjmp	.+190    	; 0x2124 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2066:	e9 e3       	ldi	r30, 0x39	; 57
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	28 2f       	mov	r18, r24
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	88 2f       	mov	r24, r24
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a9 01       	movw	r20, r18
    2078:	02 c0       	rjmp	.+4      	; 0x207e <GPIO_readPin+0x7e>
    207a:	55 95       	asr	r21
    207c:	47 95       	ror	r20
    207e:	8a 95       	dec	r24
    2080:	e2 f7       	brpl	.-8      	; 0x207a <GPIO_readPin+0x7a>
    2082:	ca 01       	movw	r24, r20
    2084:	81 70       	andi	r24, 0x01	; 1
    2086:	90 70       	andi	r25, 0x00	; 0
    2088:	88 23       	and	r24, r24
    208a:	19 f0       	breq	.+6      	; 0x2092 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	49 c0       	rjmp	.+146    	; 0x2124 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2092:	19 82       	std	Y+1, r1	; 0x01
    2094:	47 c0       	rjmp	.+142    	; 0x2124 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2096:	e6 e3       	ldi	r30, 0x36	; 54
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	8b 81       	ldd	r24, Y+3	; 0x03
    20a2:	88 2f       	mov	r24, r24
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a9 01       	movw	r20, r18
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <GPIO_readPin+0xae>
    20aa:	55 95       	asr	r21
    20ac:	47 95       	ror	r20
    20ae:	8a 95       	dec	r24
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <GPIO_readPin+0xaa>
    20b2:	ca 01       	movw	r24, r20
    20b4:	81 70       	andi	r24, 0x01	; 1
    20b6:	90 70       	andi	r25, 0x00	; 0
    20b8:	88 23       	and	r24, r24
    20ba:	19 f0       	breq	.+6      	; 0x20c2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	31 c0       	rjmp	.+98     	; 0x2124 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20c2:	19 82       	std	Y+1, r1	; 0x01
    20c4:	2f c0       	rjmp	.+94     	; 0x2124 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    20c6:	e3 e3       	ldi	r30, 0x33	; 51
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	28 2f       	mov	r18, r24
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a9 01       	movw	r20, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <GPIO_readPin+0xde>
    20da:	55 95       	asr	r21
    20dc:	47 95       	ror	r20
    20de:	8a 95       	dec	r24
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <GPIO_readPin+0xda>
    20e2:	ca 01       	movw	r24, r20
    20e4:	81 70       	andi	r24, 0x01	; 1
    20e6:	90 70       	andi	r25, 0x00	; 0
    20e8:	88 23       	and	r24, r24
    20ea:	19 f0       	breq	.+6      	; 0x20f2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    20ec:	81 e0       	ldi	r24, 0x01	; 1
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	19 c0       	rjmp	.+50     	; 0x2124 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20f2:	19 82       	std	Y+1, r1	; 0x01
    20f4:	17 c0       	rjmp	.+46     	; 0x2124 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    20f6:	e0 e3       	ldi	r30, 0x30	; 48
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a9 01       	movw	r20, r18
    2108:	02 c0       	rjmp	.+4      	; 0x210e <GPIO_readPin+0x10e>
    210a:	55 95       	asr	r21
    210c:	47 95       	ror	r20
    210e:	8a 95       	dec	r24
    2110:	e2 f7       	brpl	.-8      	; 0x210a <GPIO_readPin+0x10a>
    2112:	ca 01       	movw	r24, r20
    2114:	81 70       	andi	r24, 0x01	; 1
    2116:	90 70       	andi	r25, 0x00	; 0
    2118:	88 23       	and	r24, r24
    211a:	19 f0       	breq	.+6      	; 0x2122 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	89 83       	std	Y+1, r24	; 0x01
    2120:	01 c0       	rjmp	.+2      	; 0x2124 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2122:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	cf 91       	pop	r28
    2132:	df 91       	pop	r29
    2134:	08 95       	ret

00002136 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2136:	df 93       	push	r29
    2138:	cf 93       	push	r28
    213a:	00 d0       	rcall	.+0      	; 0x213c <GPIO_setupPortDirection+0x6>
    213c:	00 d0       	rcall	.+0      	; 0x213e <GPIO_setupPortDirection+0x8>
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2146:	89 81       	ldd	r24, Y+1	; 0x01
    2148:	84 30       	cpi	r24, 0x04	; 4
    214a:	90 f5       	brcc	.+100    	; 0x21b0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	28 2f       	mov	r18, r24
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	3c 83       	std	Y+4, r19	; 0x04
    2154:	2b 83       	std	Y+3, r18	; 0x03
    2156:	8b 81       	ldd	r24, Y+3	; 0x03
    2158:	9c 81       	ldd	r25, Y+4	; 0x04
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	91 05       	cpc	r25, r1
    215e:	d1 f0       	breq	.+52     	; 0x2194 <GPIO_setupPortDirection+0x5e>
    2160:	2b 81       	ldd	r18, Y+3	; 0x03
    2162:	3c 81       	ldd	r19, Y+4	; 0x04
    2164:	22 30       	cpi	r18, 0x02	; 2
    2166:	31 05       	cpc	r19, r1
    2168:	2c f4       	brge	.+10     	; 0x2174 <GPIO_setupPortDirection+0x3e>
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	61 f0       	breq	.+24     	; 0x218a <GPIO_setupPortDirection+0x54>
    2172:	1e c0       	rjmp	.+60     	; 0x21b0 <GPIO_setupPortDirection+0x7a>
    2174:	2b 81       	ldd	r18, Y+3	; 0x03
    2176:	3c 81       	ldd	r19, Y+4	; 0x04
    2178:	22 30       	cpi	r18, 0x02	; 2
    217a:	31 05       	cpc	r19, r1
    217c:	81 f0       	breq	.+32     	; 0x219e <GPIO_setupPortDirection+0x68>
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	83 30       	cpi	r24, 0x03	; 3
    2184:	91 05       	cpc	r25, r1
    2186:	81 f0       	breq	.+32     	; 0x21a8 <GPIO_setupPortDirection+0x72>
    2188:	13 c0       	rjmp	.+38     	; 0x21b0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    218a:	ea e3       	ldi	r30, 0x3A	; 58
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	80 83       	st	Z, r24
    2192:	0e c0       	rjmp	.+28     	; 0x21b0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2194:	e7 e3       	ldi	r30, 0x37	; 55
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	80 83       	st	Z, r24
    219c:	09 c0       	rjmp	.+18     	; 0x21b0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    219e:	e4 e3       	ldi	r30, 0x34	; 52
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	80 83       	st	Z, r24
    21a6:	04 c0       	rjmp	.+8      	; 0x21b0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    21a8:	e1 e3       	ldi	r30, 0x31	; 49
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	80 83       	st	Z, r24
			break;
		}
	}
}
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <GPIO_writePort+0x6>
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <GPIO_writePort+0x8>
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	89 83       	std	Y+1, r24	; 0x01
    21cc:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	84 30       	cpi	r24, 0x04	; 4
    21d2:	90 f5       	brcc	.+100    	; 0x2238 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    21d4:	89 81       	ldd	r24, Y+1	; 0x01
    21d6:	28 2f       	mov	r18, r24
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	3c 83       	std	Y+4, r19	; 0x04
    21dc:	2b 83       	std	Y+3, r18	; 0x03
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	9c 81       	ldd	r25, Y+4	; 0x04
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	91 05       	cpc	r25, r1
    21e6:	d1 f0       	breq	.+52     	; 0x221c <GPIO_writePort+0x5e>
    21e8:	2b 81       	ldd	r18, Y+3	; 0x03
    21ea:	3c 81       	ldd	r19, Y+4	; 0x04
    21ec:	22 30       	cpi	r18, 0x02	; 2
    21ee:	31 05       	cpc	r19, r1
    21f0:	2c f4       	brge	.+10     	; 0x21fc <GPIO_writePort+0x3e>
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	9c 81       	ldd	r25, Y+4	; 0x04
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	61 f0       	breq	.+24     	; 0x2212 <GPIO_writePort+0x54>
    21fa:	1e c0       	rjmp	.+60     	; 0x2238 <GPIO_writePort+0x7a>
    21fc:	2b 81       	ldd	r18, Y+3	; 0x03
    21fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2200:	22 30       	cpi	r18, 0x02	; 2
    2202:	31 05       	cpc	r19, r1
    2204:	81 f0       	breq	.+32     	; 0x2226 <GPIO_writePort+0x68>
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	91 05       	cpc	r25, r1
    220e:	81 f0       	breq	.+32     	; 0x2230 <GPIO_writePort+0x72>
    2210:	13 c0       	rjmp	.+38     	; 0x2238 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2212:	eb e3       	ldi	r30, 0x3B	; 59
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	80 83       	st	Z, r24
    221a:	0e c0       	rjmp	.+28     	; 0x2238 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    221c:	e8 e3       	ldi	r30, 0x38	; 56
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	8a 81       	ldd	r24, Y+2	; 0x02
    2222:	80 83       	st	Z, r24
    2224:	09 c0       	rjmp	.+18     	; 0x2238 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2226:	e5 e3       	ldi	r30, 0x35	; 53
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	80 83       	st	Z, r24
    222e:	04 c0       	rjmp	.+8      	; 0x2238 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2230:	e2 e3       	ldi	r30, 0x32	; 50
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	80 83       	st	Z, r24
			break;
		}
	}
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	00 d0       	rcall	.+0      	; 0x224c <GPIO_readPort+0x6>
    224c:	00 d0       	rcall	.+0      	; 0x224e <GPIO_readPort+0x8>
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2254:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	84 30       	cpi	r24, 0x04	; 4
    225a:	90 f5       	brcc	.+100    	; 0x22c0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	3c 83       	std	Y+4, r19	; 0x04
    2264:	2b 83       	std	Y+3, r18	; 0x03
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	91 05       	cpc	r25, r1
    226e:	d1 f0       	breq	.+52     	; 0x22a4 <GPIO_readPort+0x5e>
    2270:	2b 81       	ldd	r18, Y+3	; 0x03
    2272:	3c 81       	ldd	r19, Y+4	; 0x04
    2274:	22 30       	cpi	r18, 0x02	; 2
    2276:	31 05       	cpc	r19, r1
    2278:	2c f4       	brge	.+10     	; 0x2284 <GPIO_readPort+0x3e>
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	61 f0       	breq	.+24     	; 0x229a <GPIO_readPort+0x54>
    2282:	1e c0       	rjmp	.+60     	; 0x22c0 <GPIO_readPort+0x7a>
    2284:	2b 81       	ldd	r18, Y+3	; 0x03
    2286:	3c 81       	ldd	r19, Y+4	; 0x04
    2288:	22 30       	cpi	r18, 0x02	; 2
    228a:	31 05       	cpc	r19, r1
    228c:	81 f0       	breq	.+32     	; 0x22ae <GPIO_readPort+0x68>
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	9c 81       	ldd	r25, Y+4	; 0x04
    2292:	83 30       	cpi	r24, 0x03	; 3
    2294:	91 05       	cpc	r25, r1
    2296:	81 f0       	breq	.+32     	; 0x22b8 <GPIO_readPort+0x72>
    2298:	13 c0       	rjmp	.+38     	; 0x22c0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    229a:	e9 e3       	ldi	r30, 0x39	; 57
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	0e c0       	rjmp	.+28     	; 0x22c0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    22a4:	e6 e3       	ldi	r30, 0x36	; 54
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	89 83       	std	Y+1, r24	; 0x01
    22ac:	09 c0       	rjmp	.+18     	; 0x22c0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    22ae:	e3 e3       	ldi	r30, 0x33	; 51
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	04 c0       	rjmp	.+8      	; 0x22c0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    22b8:	e0 e3       	ldi	r30, 0x30	; 48
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    22c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	60 97       	sbiw	r28, 0x10	; 16
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	61 e0       	ldi	r22, 0x01	; 1
    22f2:	40 e0       	ldi	r20, 0x00	; 0
    22f4:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	62 e0       	ldi	r22, 0x02	; 2
    22fc:	40 e0       	ldi	r20, 0x00	; 0
    22fe:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	63 e0       	ldi	r22, 0x03	; 3
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	64 e0       	ldi	r22, 0x04	; 4
    2310:	40 e0       	ldi	r20, 0x00	; 0
    2312:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	65 e0       	ldi	r22, 0x05	; 5
    231a:	40 e0       	ldi	r20, 0x00	; 0
    231c:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	66 e0       	ldi	r22, 0x06	; 6
    2324:	40 e0       	ldi	r20, 0x00	; 0
    2326:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	67 e0       	ldi	r22, 0x07	; 7
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2334:	1f 86       	std	Y+15, r1	; 0x0f
    2336:	ab c0       	rjmp	.+342    	; 0x248e <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	6f 85       	ldd	r22, Y+15	; 0x0f
    233c:	41 e0       	ldi	r20, 0x01	; 1
    233e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	6f 85       	ldd	r22, Y+15	; 0x0f
    2346:	40 e0       	ldi	r20, 0x00	; 0
    2348:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    234c:	18 8a       	std	Y+16, r1	; 0x10
    234e:	22 c0       	rjmp	.+68     	; 0x2394 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2350:	88 89       	ldd	r24, Y+16	; 0x10
    2352:	98 2f       	mov	r25, r24
    2354:	9c 5f       	subi	r25, 0xFC	; 252
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	69 2f       	mov	r22, r25
    235a:	0e 94 00 10 	call	0x2000	; 0x2000 <GPIO_readPin>
    235e:	88 23       	and	r24, r24
    2360:	b1 f4       	brne	.+44     	; 0x238e <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2362:	8f 85       	ldd	r24, Y+15	; 0x0f
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	88 0f       	add	r24, r24
    236e:	99 1f       	adc	r25, r25
    2370:	98 2f       	mov	r25, r24
    2372:	88 89       	ldd	r24, Y+16	; 0x10
    2374:	89 0f       	add	r24, r25
    2376:	8f 5f       	subi	r24, 0xFF	; 255
    2378:	0e 94 4c 12 	call	0x2498	; 0x2498 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    237c:	60 96       	adiw	r28, 0x10	; 16
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    238e:	88 89       	ldd	r24, Y+16	; 0x10
    2390:	8f 5f       	subi	r24, 0xFF	; 255
    2392:	88 8b       	std	Y+16, r24	; 0x10
    2394:	88 89       	ldd	r24, Y+16	; 0x10
    2396:	84 30       	cpi	r24, 0x04	; 4
    2398:	d8 f2       	brcs	.-74     	; 0x2350 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	6f 85       	ldd	r22, Y+15	; 0x0f
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	a0 ea       	ldi	r26, 0xA0	; 160
    23aa:	b0 e4       	ldi	r27, 0x40	; 64
    23ac:	8b 87       	std	Y+11, r24	; 0x0b
    23ae:	9c 87       	std	Y+12, r25	; 0x0c
    23b0:	ad 87       	std	Y+13, r26	; 0x0d
    23b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	4a ef       	ldi	r20, 0xFA	; 250
    23c2:	54 e4       	ldi	r21, 0x44	; 68
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	8f 83       	std	Y+7, r24	; 0x07
    23ce:	98 87       	std	Y+8, r25	; 0x08
    23d0:	a9 87       	std	Y+9, r26	; 0x09
    23d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23d4:	6f 81       	ldd	r22, Y+7	; 0x07
    23d6:	78 85       	ldd	r23, Y+8	; 0x08
    23d8:	89 85       	ldd	r24, Y+9	; 0x09
    23da:	9a 85       	ldd	r25, Y+10	; 0x0a
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e8       	ldi	r20, 0x80	; 128
    23e2:	5f e3       	ldi	r21, 0x3F	; 63
    23e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e8:	88 23       	and	r24, r24
    23ea:	2c f4       	brge	.+10     	; 0x23f6 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	3f c0       	rjmp	.+126    	; 0x2474 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    23f6:	6f 81       	ldd	r22, Y+7	; 0x07
    23f8:	78 85       	ldd	r23, Y+8	; 0x08
    23fa:	89 85       	ldd	r24, Y+9	; 0x09
    23fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	3f ef       	ldi	r19, 0xFF	; 255
    2402:	4f e7       	ldi	r20, 0x7F	; 127
    2404:	57 e4       	ldi	r21, 0x47	; 71
    2406:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    240a:	18 16       	cp	r1, r24
    240c:	4c f5       	brge	.+82     	; 0x2460 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2410:	7c 85       	ldd	r23, Y+12	; 0x0c
    2412:	8d 85       	ldd	r24, Y+13	; 0x0d
    2414:	9e 85       	ldd	r25, Y+14	; 0x0e
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e2       	ldi	r20, 0x20	; 32
    241c:	51 e4       	ldi	r21, 0x41	; 65
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	0f c0       	rjmp	.+30     	; 0x2456 <KEYPAD_getPressedKey+0x186>
    2438:	88 ec       	ldi	r24, 0xC8	; 200
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9c 83       	std	Y+4, r25	; 0x04
    243e:	8b 83       	std	Y+3, r24	; 0x03
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <KEYPAD_getPressedKey+0x174>
    2448:	9c 83       	std	Y+4, r25	; 0x04
    244a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	69 f7       	brne	.-38     	; 0x2438 <KEYPAD_getPressedKey+0x168>
    245e:	14 c0       	rjmp	.+40     	; 0x2488 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2460:	6f 81       	ldd	r22, Y+7	; 0x07
    2462:	78 85       	ldd	r23, Y+8	; 0x08
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	9e 83       	std	Y+6, r25	; 0x06
    2472:	8d 83       	std	Y+5, r24	; 0x05
    2474:	8d 81       	ldd	r24, Y+5	; 0x05
    2476:	9e 81       	ldd	r25, Y+6	; 0x06
    2478:	9a 83       	std	Y+2, r25	; 0x02
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <KEYPAD_getPressedKey+0x1b0>
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2488:	8f 85       	ldd	r24, Y+15	; 0x0f
    248a:	8f 5f       	subi	r24, 0xFF	; 255
    248c:	8f 87       	std	Y+15, r24	; 0x0f
    248e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2490:	84 30       	cpi	r24, 0x04	; 4
    2492:	08 f4       	brcc	.+2      	; 0x2496 <KEYPAD_getPressedKey+0x1c6>
    2494:	51 cf       	rjmp	.-350    	; 0x2338 <KEYPAD_getPressedKey+0x68>
    2496:	4e cf       	rjmp	.-356    	; 0x2334 <KEYPAD_getPressedKey+0x64>

00002498 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <KEYPAD_4x4_adjustKeyNumber+0x6>
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    24a6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    24a8:	8a 81       	ldd	r24, Y+2	; 0x02
    24aa:	28 2f       	mov	r18, r24
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	3c 83       	std	Y+4, r19	; 0x04
    24b0:	2b 83       	std	Y+3, r18	; 0x03
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	88 30       	cpi	r24, 0x08	; 8
    24b8:	91 05       	cpc	r25, r1
    24ba:	09 f4       	brne	.+2      	; 0x24be <KEYPAD_4x4_adjustKeyNumber+0x26>
    24bc:	70 c0       	rjmp	.+224    	; 0x259e <KEYPAD_4x4_adjustKeyNumber+0x106>
    24be:	2b 81       	ldd	r18, Y+3	; 0x03
    24c0:	3c 81       	ldd	r19, Y+4	; 0x04
    24c2:	29 30       	cpi	r18, 0x09	; 9
    24c4:	31 05       	cpc	r19, r1
    24c6:	5c f5       	brge	.+86     	; 0x251e <KEYPAD_4x4_adjustKeyNumber+0x86>
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	84 30       	cpi	r24, 0x04	; 4
    24ce:	91 05       	cpc	r25, r1
    24d0:	09 f4       	brne	.+2      	; 0x24d4 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    24d2:	59 c0       	rjmp	.+178    	; 0x2586 <KEYPAD_4x4_adjustKeyNumber+0xee>
    24d4:	2b 81       	ldd	r18, Y+3	; 0x03
    24d6:	3c 81       	ldd	r19, Y+4	; 0x04
    24d8:	25 30       	cpi	r18, 0x05	; 5
    24da:	31 05       	cpc	r19, r1
    24dc:	9c f4       	brge	.+38     	; 0x2504 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	82 30       	cpi	r24, 0x02	; 2
    24e4:	91 05       	cpc	r25, r1
    24e6:	09 f4       	brne	.+2      	; 0x24ea <KEYPAD_4x4_adjustKeyNumber+0x52>
    24e8:	48 c0       	rjmp	.+144    	; 0x257a <KEYPAD_4x4_adjustKeyNumber+0xe2>
    24ea:	2b 81       	ldd	r18, Y+3	; 0x03
    24ec:	3c 81       	ldd	r19, Y+4	; 0x04
    24ee:	23 30       	cpi	r18, 0x03	; 3
    24f0:	31 05       	cpc	r19, r1
    24f2:	0c f0       	brlt	.+2      	; 0x24f6 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    24f4:	45 c0       	rjmp	.+138    	; 0x2580 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	91 05       	cpc	r25, r1
    24fe:	09 f4       	brne	.+2      	; 0x2502 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2500:	39 c0       	rjmp	.+114    	; 0x2574 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2502:	67 c0       	rjmp	.+206    	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2504:	2b 81       	ldd	r18, Y+3	; 0x03
    2506:	3c 81       	ldd	r19, Y+4	; 0x04
    2508:	26 30       	cpi	r18, 0x06	; 6
    250a:	31 05       	cpc	r19, r1
    250c:	09 f4       	brne	.+2      	; 0x2510 <KEYPAD_4x4_adjustKeyNumber+0x78>
    250e:	41 c0       	rjmp	.+130    	; 0x2592 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2510:	8b 81       	ldd	r24, Y+3	; 0x03
    2512:	9c 81       	ldd	r25, Y+4	; 0x04
    2514:	87 30       	cpi	r24, 0x07	; 7
    2516:	91 05       	cpc	r25, r1
    2518:	0c f0       	brlt	.+2      	; 0x251c <KEYPAD_4x4_adjustKeyNumber+0x84>
    251a:	3e c0       	rjmp	.+124    	; 0x2598 <KEYPAD_4x4_adjustKeyNumber+0x100>
    251c:	37 c0       	rjmp	.+110    	; 0x258c <KEYPAD_4x4_adjustKeyNumber+0xf4>
    251e:	2b 81       	ldd	r18, Y+3	; 0x03
    2520:	3c 81       	ldd	r19, Y+4	; 0x04
    2522:	2c 30       	cpi	r18, 0x0C	; 12
    2524:	31 05       	cpc	r19, r1
    2526:	09 f4       	brne	.+2      	; 0x252a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2528:	46 c0       	rjmp	.+140    	; 0x25b6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	8d 30       	cpi	r24, 0x0D	; 13
    2530:	91 05       	cpc	r25, r1
    2532:	5c f4       	brge	.+22     	; 0x254a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2534:	2b 81       	ldd	r18, Y+3	; 0x03
    2536:	3c 81       	ldd	r19, Y+4	; 0x04
    2538:	2a 30       	cpi	r18, 0x0A	; 10
    253a:	31 05       	cpc	r19, r1
    253c:	b1 f1       	breq	.+108    	; 0x25aa <KEYPAD_4x4_adjustKeyNumber+0x112>
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	8b 30       	cpi	r24, 0x0B	; 11
    2544:	91 05       	cpc	r25, r1
    2546:	a4 f5       	brge	.+104    	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    2548:	2d c0       	rjmp	.+90     	; 0x25a4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    254a:	2b 81       	ldd	r18, Y+3	; 0x03
    254c:	3c 81       	ldd	r19, Y+4	; 0x04
    254e:	2e 30       	cpi	r18, 0x0E	; 14
    2550:	31 05       	cpc	r19, r1
    2552:	b9 f1       	breq	.+110    	; 0x25c2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	8e 30       	cpi	r24, 0x0E	; 14
    255a:	91 05       	cpc	r25, r1
    255c:	7c f1       	brlt	.+94     	; 0x25bc <KEYPAD_4x4_adjustKeyNumber+0x124>
    255e:	2b 81       	ldd	r18, Y+3	; 0x03
    2560:	3c 81       	ldd	r19, Y+4	; 0x04
    2562:	2f 30       	cpi	r18, 0x0F	; 15
    2564:	31 05       	cpc	r19, r1
    2566:	79 f1       	breq	.+94     	; 0x25c6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	80 31       	cpi	r24, 0x10	; 16
    256e:	91 05       	cpc	r25, r1
    2570:	69 f1       	breq	.+90     	; 0x25cc <KEYPAD_4x4_adjustKeyNumber+0x134>
    2572:	2f c0       	rjmp	.+94     	; 0x25d2 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2574:	87 e0       	ldi	r24, 0x07	; 7
    2576:	89 83       	std	Y+1, r24	; 0x01
    2578:	2e c0       	rjmp	.+92     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    257a:	88 e0       	ldi	r24, 0x08	; 8
    257c:	89 83       	std	Y+1, r24	; 0x01
    257e:	2b c0       	rjmp	.+86     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2580:	89 e0       	ldi	r24, 0x09	; 9
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	28 c0       	rjmp	.+80     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2586:	85 e2       	ldi	r24, 0x25	; 37
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	25 c0       	rjmp	.+74     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    258c:	84 e0       	ldi	r24, 0x04	; 4
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	22 c0       	rjmp	.+68     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2592:	85 e0       	ldi	r24, 0x05	; 5
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	1f c0       	rjmp	.+62     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2598:	86 e0       	ldi	r24, 0x06	; 6
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	1c c0       	rjmp	.+56     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    259e:	8a e2       	ldi	r24, 0x2A	; 42
    25a0:	89 83       	std	Y+1, r24	; 0x01
    25a2:	19 c0       	rjmp	.+50     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    25a4:	81 e0       	ldi	r24, 0x01	; 1
    25a6:	89 83       	std	Y+1, r24	; 0x01
    25a8:	16 c0       	rjmp	.+44     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    25aa:	82 e0       	ldi	r24, 0x02	; 2
    25ac:	89 83       	std	Y+1, r24	; 0x01
    25ae:	13 c0       	rjmp	.+38     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    25b0:	83 e0       	ldi	r24, 0x03	; 3
    25b2:	89 83       	std	Y+1, r24	; 0x01
    25b4:	10 c0       	rjmp	.+32     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    25b6:	8d e2       	ldi	r24, 0x2D	; 45
    25b8:	89 83       	std	Y+1, r24	; 0x01
    25ba:	0d c0       	rjmp	.+26     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    25bc:	8d e0       	ldi	r24, 0x0D	; 13
    25be:	89 83       	std	Y+1, r24	; 0x01
    25c0:	0a c0       	rjmp	.+20     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    25c2:	19 82       	std	Y+1, r1	; 0x01
    25c4:	08 c0       	rjmp	.+16     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    25c6:	8d e3       	ldi	r24, 0x3D	; 61
    25c8:	89 83       	std	Y+1, r24	; 0x01
    25ca:	05 c0       	rjmp	.+10     	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    25cc:	8b e2       	ldi	r24, 0x2B	; 43
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
} 
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	cf 91       	pop	r28
    25e2:	df 91       	pop	r29
    25e4:	08 95       	ret

000025e6 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
    25ee:	2e 97       	sbiw	r28, 0x0e	; 14
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    25fa:	83 e0       	ldi	r24, 0x03	; 3
    25fc:	66 e0       	ldi	r22, 0x06	; 6
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2604:	83 e0       	ldi	r24, 0x03	; 3
    2606:	67 e0       	ldi	r22, 0x07	; 7
    2608:	41 e0       	ldi	r20, 0x01	; 1
    260a:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <GPIO_setupPinDirection>
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	a0 ea       	ldi	r26, 0xA0	; 160
    2614:	b1 e4       	ldi	r27, 0x41	; 65
    2616:	8b 87       	std	Y+11, r24	; 0x0b
    2618:	9c 87       	std	Y+12, r25	; 0x0c
    261a:	ad 87       	std	Y+13, r26	; 0x0d
    261c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2620:	7c 85       	ldd	r23, Y+12	; 0x0c
    2622:	8d 85       	ldd	r24, Y+13	; 0x0d
    2624:	9e 85       	ldd	r25, Y+14	; 0x0e
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	4a ef       	ldi	r20, 0xFA	; 250
    262c:	54 e4       	ldi	r21, 0x44	; 68
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	8f 83       	std	Y+7, r24	; 0x07
    2638:	98 87       	std	Y+8, r25	; 0x08
    263a:	a9 87       	std	Y+9, r26	; 0x09
    263c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    263e:	6f 81       	ldd	r22, Y+7	; 0x07
    2640:	78 85       	ldd	r23, Y+8	; 0x08
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	20 e0       	ldi	r18, 0x00	; 0
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	40 e8       	ldi	r20, 0x80	; 128
    264c:	5f e3       	ldi	r21, 0x3F	; 63
    264e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2652:	88 23       	and	r24, r24
    2654:	2c f4       	brge	.+10     	; 0x2660 <LCD_init+0x7a>
		__ticks = 1;
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
    265e:	3f c0       	rjmp	.+126    	; 0x26de <LCD_init+0xf8>
	else if (__tmp > 65535)
    2660:	6f 81       	ldd	r22, Y+7	; 0x07
    2662:	78 85       	ldd	r23, Y+8	; 0x08
    2664:	89 85       	ldd	r24, Y+9	; 0x09
    2666:	9a 85       	ldd	r25, Y+10	; 0x0a
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	3f ef       	ldi	r19, 0xFF	; 255
    266c:	4f e7       	ldi	r20, 0x7F	; 127
    266e:	57 e4       	ldi	r21, 0x47	; 71
    2670:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2674:	18 16       	cp	r1, r24
    2676:	4c f5       	brge	.+82     	; 0x26ca <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2678:	6b 85       	ldd	r22, Y+11	; 0x0b
    267a:	7c 85       	ldd	r23, Y+12	; 0x0c
    267c:	8d 85       	ldd	r24, Y+13	; 0x0d
    267e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2680:	20 e0       	ldi	r18, 0x00	; 0
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e2       	ldi	r20, 0x20	; 32
    2686:	51 e4       	ldi	r21, 0x41	; 65
    2688:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	9e 83       	std	Y+6, r25	; 0x06
    269e:	8d 83       	std	Y+5, r24	; 0x05
    26a0:	0f c0       	rjmp	.+30     	; 0x26c0 <LCD_init+0xda>
    26a2:	88 ec       	ldi	r24, 0xC8	; 200
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	9c 83       	std	Y+4, r25	; 0x04
    26a8:	8b 83       	std	Y+3, r24	; 0x03
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	f1 f7       	brne	.-4      	; 0x26ae <LCD_init+0xc8>
    26b2:	9c 83       	std	Y+4, r25	; 0x04
    26b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b6:	8d 81       	ldd	r24, Y+5	; 0x05
    26b8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c0:	8d 81       	ldd	r24, Y+5	; 0x05
    26c2:	9e 81       	ldd	r25, Y+6	; 0x06
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	69 f7       	brne	.-38     	; 0x26a2 <LCD_init+0xbc>
    26c8:	14 c0       	rjmp	.+40     	; 0x26f2 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ca:	6f 81       	ldd	r22, Y+7	; 0x07
    26cc:	78 85       	ldd	r23, Y+8	; 0x08
    26ce:	89 85       	ldd	r24, Y+9	; 0x09
    26d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	9e 83       	std	Y+6, r25	; 0x06
    26dc:	8d 83       	std	Y+5, r24	; 0x05
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	9a 83       	std	Y+2, r25	; 0x02
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	9a 81       	ldd	r25, Y+2	; 0x02
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <LCD_init+0x104>
    26ee:	9a 83       	std	Y+2, r25	; 0x02
    26f0:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	6f ef       	ldi	r22, 0xFF	; 255
    26f6:	0e 94 9b 10 	call	0x2136	; 0x2136 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    26fa:	88 e3       	ldi	r24, 0x38	; 56
    26fc:	0e 94 8f 13 	call	0x271e	; 0x271e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2700:	8c e0       	ldi	r24, 0x0C	; 12
    2702:	0e 94 8f 13 	call	0x271e	; 0x271e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	0e 94 8f 13 	call	0x271e	; 0x271e <LCD_sendCommand>
}
    270c:	2e 96       	adiw	r28, 0x0e	; 14
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	f8 94       	cli
    2712:	de bf       	out	0x3e, r29	; 62
    2714:	0f be       	out	0x3f, r0	; 63
    2716:	cd bf       	out	0x3d, r28	; 61
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	e9 97       	sbiw	r28, 0x39	; 57
    2728:	0f b6       	in	r0, 0x3f	; 63
    272a:	f8 94       	cli
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	0f be       	out	0x3f, r0	; 63
    2730:	cd bf       	out	0x3d, r28	; 61
    2732:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2734:	83 e0       	ldi	r24, 0x03	; 3
    2736:	66 e0       	ldi	r22, 0x06	; 6
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <GPIO_writePin>
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	a0 e8       	ldi	r26, 0x80	; 128
    2744:	bf e3       	ldi	r27, 0x3F	; 63
    2746:	8d ab       	std	Y+53, r24	; 0x35
    2748:	9e ab       	std	Y+54, r25	; 0x36
    274a:	af ab       	std	Y+55, r26	; 0x37
    274c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274e:	6d a9       	ldd	r22, Y+53	; 0x35
    2750:	7e a9       	ldd	r23, Y+54	; 0x36
    2752:	8f a9       	ldd	r24, Y+55	; 0x37
    2754:	98 ad       	ldd	r25, Y+56	; 0x38
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	4a ef       	ldi	r20, 0xFA	; 250
    275c:	54 e4       	ldi	r21, 0x44	; 68
    275e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	89 ab       	std	Y+49, r24	; 0x31
    2768:	9a ab       	std	Y+50, r25	; 0x32
    276a:	ab ab       	std	Y+51, r26	; 0x33
    276c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    276e:	69 a9       	ldd	r22, Y+49	; 0x31
    2770:	7a a9       	ldd	r23, Y+50	; 0x32
    2772:	8b a9       	ldd	r24, Y+51	; 0x33
    2774:	9c a9       	ldd	r25, Y+52	; 0x34
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e8       	ldi	r20, 0x80	; 128
    277c:	5f e3       	ldi	r21, 0x3F	; 63
    277e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2782:	88 23       	and	r24, r24
    2784:	2c f4       	brge	.+10     	; 0x2790 <LCD_sendCommand+0x72>
		__ticks = 1;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	98 ab       	std	Y+48, r25	; 0x30
    278c:	8f a7       	std	Y+47, r24	; 0x2f
    278e:	3f c0       	rjmp	.+126    	; 0x280e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2790:	69 a9       	ldd	r22, Y+49	; 0x31
    2792:	7a a9       	ldd	r23, Y+50	; 0x32
    2794:	8b a9       	ldd	r24, Y+51	; 0x33
    2796:	9c a9       	ldd	r25, Y+52	; 0x34
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	3f ef       	ldi	r19, 0xFF	; 255
    279c:	4f e7       	ldi	r20, 0x7F	; 127
    279e:	57 e4       	ldi	r21, 0x47	; 71
    27a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a4:	18 16       	cp	r1, r24
    27a6:	4c f5       	brge	.+82     	; 0x27fa <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27a8:	6d a9       	ldd	r22, Y+53	; 0x35
    27aa:	7e a9       	ldd	r23, Y+54	; 0x36
    27ac:	8f a9       	ldd	r24, Y+55	; 0x37
    27ae:	98 ad       	ldd	r25, Y+56	; 0x38
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	40 e2       	ldi	r20, 0x20	; 32
    27b6:	51 e4       	ldi	r21, 0x41	; 65
    27b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	98 ab       	std	Y+48, r25	; 0x30
    27ce:	8f a7       	std	Y+47, r24	; 0x2f
    27d0:	0f c0       	rjmp	.+30     	; 0x27f0 <LCD_sendCommand+0xd2>
    27d2:	88 ec       	ldi	r24, 0xC8	; 200
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	9e a7       	std	Y+46, r25	; 0x2e
    27d8:	8d a7       	std	Y+45, r24	; 0x2d
    27da:	8d a5       	ldd	r24, Y+45	; 0x2d
    27dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	f1 f7       	brne	.-4      	; 0x27de <LCD_sendCommand+0xc0>
    27e2:	9e a7       	std	Y+46, r25	; 0x2e
    27e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    27e8:	98 a9       	ldd	r25, Y+48	; 0x30
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	98 ab       	std	Y+48, r25	; 0x30
    27ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    27f2:	98 a9       	ldd	r25, Y+48	; 0x30
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	69 f7       	brne	.-38     	; 0x27d2 <LCD_sendCommand+0xb4>
    27f8:	14 c0       	rjmp	.+40     	; 0x2822 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27fa:	69 a9       	ldd	r22, Y+49	; 0x31
    27fc:	7a a9       	ldd	r23, Y+50	; 0x32
    27fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2800:	9c a9       	ldd	r25, Y+52	; 0x34
    2802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	98 ab       	std	Y+48, r25	; 0x30
    280c:	8f a7       	std	Y+47, r24	; 0x2f
    280e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2810:	98 a9       	ldd	r25, Y+48	; 0x30
    2812:	9c a7       	std	Y+44, r25	; 0x2c
    2814:	8b a7       	std	Y+43, r24	; 0x2b
    2816:	8b a5       	ldd	r24, Y+43	; 0x2b
    2818:	9c a5       	ldd	r25, Y+44	; 0x2c
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <LCD_sendCommand+0xfc>
    281e:	9c a7       	std	Y+44, r25	; 0x2c
    2820:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2822:	83 e0       	ldi	r24, 0x03	; 3
    2824:	67 e0       	ldi	r22, 0x07	; 7
    2826:	41 e0       	ldi	r20, 0x01	; 1
    2828:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <GPIO_writePin>
    282c:	80 e0       	ldi	r24, 0x00	; 0
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	a0 e8       	ldi	r26, 0x80	; 128
    2832:	bf e3       	ldi	r27, 0x3F	; 63
    2834:	8f a3       	std	Y+39, r24	; 0x27
    2836:	98 a7       	std	Y+40, r25	; 0x28
    2838:	a9 a7       	std	Y+41, r26	; 0x29
    283a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    283c:	6f a1       	ldd	r22, Y+39	; 0x27
    283e:	78 a5       	ldd	r23, Y+40	; 0x28
    2840:	89 a5       	ldd	r24, Y+41	; 0x29
    2842:	9a a5       	ldd	r25, Y+42	; 0x2a
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	4a ef       	ldi	r20, 0xFA	; 250
    284a:	54 e4       	ldi	r21, 0x44	; 68
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	8b a3       	std	Y+35, r24	; 0x23
    2856:	9c a3       	std	Y+36, r25	; 0x24
    2858:	ad a3       	std	Y+37, r26	; 0x25
    285a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    285c:	6b a1       	ldd	r22, Y+35	; 0x23
    285e:	7c a1       	ldd	r23, Y+36	; 0x24
    2860:	8d a1       	ldd	r24, Y+37	; 0x25
    2862:	9e a1       	ldd	r25, Y+38	; 0x26
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e8       	ldi	r20, 0x80	; 128
    286a:	5f e3       	ldi	r21, 0x3F	; 63
    286c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2870:	88 23       	and	r24, r24
    2872:	2c f4       	brge	.+10     	; 0x287e <LCD_sendCommand+0x160>
		__ticks = 1;
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	9a a3       	std	Y+34, r25	; 0x22
    287a:	89 a3       	std	Y+33, r24	; 0x21
    287c:	3f c0       	rjmp	.+126    	; 0x28fc <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    287e:	6b a1       	ldd	r22, Y+35	; 0x23
    2880:	7c a1       	ldd	r23, Y+36	; 0x24
    2882:	8d a1       	ldd	r24, Y+37	; 0x25
    2884:	9e a1       	ldd	r25, Y+38	; 0x26
    2886:	20 e0       	ldi	r18, 0x00	; 0
    2888:	3f ef       	ldi	r19, 0xFF	; 255
    288a:	4f e7       	ldi	r20, 0x7F	; 127
    288c:	57 e4       	ldi	r21, 0x47	; 71
    288e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2892:	18 16       	cp	r1, r24
    2894:	4c f5       	brge	.+82     	; 0x28e8 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2896:	6f a1       	ldd	r22, Y+39	; 0x27
    2898:	78 a5       	ldd	r23, Y+40	; 0x28
    289a:	89 a5       	ldd	r24, Y+41	; 0x29
    289c:	9a a5       	ldd	r25, Y+42	; 0x2a
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e2       	ldi	r20, 0x20	; 32
    28a4:	51 e4       	ldi	r21, 0x41	; 65
    28a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	bc 01       	movw	r22, r24
    28b0:	cd 01       	movw	r24, r26
    28b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9a a3       	std	Y+34, r25	; 0x22
    28bc:	89 a3       	std	Y+33, r24	; 0x21
    28be:	0f c0       	rjmp	.+30     	; 0x28de <LCD_sendCommand+0x1c0>
    28c0:	88 ec       	ldi	r24, 0xC8	; 200
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	98 a3       	std	Y+32, r25	; 0x20
    28c6:	8f 8f       	std	Y+31, r24	; 0x1f
    28c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28ca:	98 a1       	ldd	r25, Y+32	; 0x20
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <LCD_sendCommand+0x1ae>
    28d0:	98 a3       	std	Y+32, r25	; 0x20
    28d2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d4:	89 a1       	ldd	r24, Y+33	; 0x21
    28d6:	9a a1       	ldd	r25, Y+34	; 0x22
    28d8:	01 97       	sbiw	r24, 0x01	; 1
    28da:	9a a3       	std	Y+34, r25	; 0x22
    28dc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28de:	89 a1       	ldd	r24, Y+33	; 0x21
    28e0:	9a a1       	ldd	r25, Y+34	; 0x22
    28e2:	00 97       	sbiw	r24, 0x00	; 0
    28e4:	69 f7       	brne	.-38     	; 0x28c0 <LCD_sendCommand+0x1a2>
    28e6:	14 c0       	rjmp	.+40     	; 0x2910 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e8:	6b a1       	ldd	r22, Y+35	; 0x23
    28ea:	7c a1       	ldd	r23, Y+36	; 0x24
    28ec:	8d a1       	ldd	r24, Y+37	; 0x25
    28ee:	9e a1       	ldd	r25, Y+38	; 0x26
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9a a3       	std	Y+34, r25	; 0x22
    28fa:	89 a3       	std	Y+33, r24	; 0x21
    28fc:	89 a1       	ldd	r24, Y+33	; 0x21
    28fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2900:	9e 8f       	std	Y+30, r25	; 0x1e
    2902:	8d 8f       	std	Y+29, r24	; 0x1d
    2904:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2906:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <LCD_sendCommand+0x1ea>
    290c:	9e 8f       	std	Y+30, r25	; 0x1e
    290e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	69 ad       	ldd	r22, Y+57	; 0x39
    2914:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePort>
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	a0 e8       	ldi	r26, 0x80	; 128
    291e:	bf e3       	ldi	r27, 0x3F	; 63
    2920:	89 8f       	std	Y+25, r24	; 0x19
    2922:	9a 8f       	std	Y+26, r25	; 0x1a
    2924:	ab 8f       	std	Y+27, r26	; 0x1b
    2926:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2928:	69 8d       	ldd	r22, Y+25	; 0x19
    292a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    292c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    292e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	4a ef       	ldi	r20, 0xFA	; 250
    2936:	54 e4       	ldi	r21, 0x44	; 68
    2938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	8d 8b       	std	Y+21, r24	; 0x15
    2942:	9e 8b       	std	Y+22, r25	; 0x16
    2944:	af 8b       	std	Y+23, r26	; 0x17
    2946:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2948:	6d 89       	ldd	r22, Y+21	; 0x15
    294a:	7e 89       	ldd	r23, Y+22	; 0x16
    294c:	8f 89       	ldd	r24, Y+23	; 0x17
    294e:	98 8d       	ldd	r25, Y+24	; 0x18
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	40 e8       	ldi	r20, 0x80	; 128
    2956:	5f e3       	ldi	r21, 0x3F	; 63
    2958:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    295c:	88 23       	and	r24, r24
    295e:	2c f4       	brge	.+10     	; 0x296a <LCD_sendCommand+0x24c>
		__ticks = 1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	90 e0       	ldi	r25, 0x00	; 0
    2964:	9c 8b       	std	Y+20, r25	; 0x14
    2966:	8b 8b       	std	Y+19, r24	; 0x13
    2968:	3f c0       	rjmp	.+126    	; 0x29e8 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    296a:	6d 89       	ldd	r22, Y+21	; 0x15
    296c:	7e 89       	ldd	r23, Y+22	; 0x16
    296e:	8f 89       	ldd	r24, Y+23	; 0x17
    2970:	98 8d       	ldd	r25, Y+24	; 0x18
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	3f ef       	ldi	r19, 0xFF	; 255
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	57 e4       	ldi	r21, 0x47	; 71
    297a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    297e:	18 16       	cp	r1, r24
    2980:	4c f5       	brge	.+82     	; 0x29d4 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2982:	69 8d       	ldd	r22, Y+25	; 0x19
    2984:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2986:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2988:	9c 8d       	ldd	r25, Y+28	; 0x1c
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	40 e2       	ldi	r20, 0x20	; 32
    2990:	51 e4       	ldi	r21, 0x41	; 65
    2992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	bc 01       	movw	r22, r24
    299c:	cd 01       	movw	r24, r26
    299e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	9c 8b       	std	Y+20, r25	; 0x14
    29a8:	8b 8b       	std	Y+19, r24	; 0x13
    29aa:	0f c0       	rjmp	.+30     	; 0x29ca <LCD_sendCommand+0x2ac>
    29ac:	88 ec       	ldi	r24, 0xC8	; 200
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9a 8b       	std	Y+18, r25	; 0x12
    29b2:	89 8b       	std	Y+17, r24	; 0x11
    29b4:	89 89       	ldd	r24, Y+17	; 0x11
    29b6:	9a 89       	ldd	r25, Y+18	; 0x12
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	f1 f7       	brne	.-4      	; 0x29b8 <LCD_sendCommand+0x29a>
    29bc:	9a 8b       	std	Y+18, r25	; 0x12
    29be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c0:	8b 89       	ldd	r24, Y+19	; 0x13
    29c2:	9c 89       	ldd	r25, Y+20	; 0x14
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	9c 8b       	std	Y+20, r25	; 0x14
    29c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ca:	8b 89       	ldd	r24, Y+19	; 0x13
    29cc:	9c 89       	ldd	r25, Y+20	; 0x14
    29ce:	00 97       	sbiw	r24, 0x00	; 0
    29d0:	69 f7       	brne	.-38     	; 0x29ac <LCD_sendCommand+0x28e>
    29d2:	14 c0       	rjmp	.+40     	; 0x29fc <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d4:	6d 89       	ldd	r22, Y+21	; 0x15
    29d6:	7e 89       	ldd	r23, Y+22	; 0x16
    29d8:	8f 89       	ldd	r24, Y+23	; 0x17
    29da:	98 8d       	ldd	r25, Y+24	; 0x18
    29dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e0:	dc 01       	movw	r26, r24
    29e2:	cb 01       	movw	r24, r22
    29e4:	9c 8b       	std	Y+20, r25	; 0x14
    29e6:	8b 8b       	std	Y+19, r24	; 0x13
    29e8:	8b 89       	ldd	r24, Y+19	; 0x13
    29ea:	9c 89       	ldd	r25, Y+20	; 0x14
    29ec:	98 8b       	std	Y+16, r25	; 0x10
    29ee:	8f 87       	std	Y+15, r24	; 0x0f
    29f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29f2:	98 89       	ldd	r25, Y+16	; 0x10
    29f4:	01 97       	sbiw	r24, 0x01	; 1
    29f6:	f1 f7       	brne	.-4      	; 0x29f4 <LCD_sendCommand+0x2d6>
    29f8:	98 8b       	std	Y+16, r25	; 0x10
    29fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29fc:	83 e0       	ldi	r24, 0x03	; 3
    29fe:	67 e0       	ldi	r22, 0x07	; 7
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <GPIO_writePin>
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	a0 e8       	ldi	r26, 0x80	; 128
    2a0c:	bf e3       	ldi	r27, 0x3F	; 63
    2a0e:	8b 87       	std	Y+11, r24	; 0x0b
    2a10:	9c 87       	std	Y+12, r25	; 0x0c
    2a12:	ad 87       	std	Y+13, r26	; 0x0d
    2a14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4a ef       	ldi	r20, 0xFA	; 250
    2a24:	54 e4       	ldi	r21, 0x44	; 68
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	8f 83       	std	Y+7, r24	; 0x07
    2a30:	98 87       	std	Y+8, r25	; 0x08
    2a32:	a9 87       	std	Y+9, r26	; 0x09
    2a34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a36:	6f 81       	ldd	r22, Y+7	; 0x07
    2a38:	78 85       	ldd	r23, Y+8	; 0x08
    2a3a:	89 85       	ldd	r24, Y+9	; 0x09
    2a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e8       	ldi	r20, 0x80	; 128
    2a44:	5f e3       	ldi	r21, 0x3F	; 63
    2a46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a4a:	88 23       	and	r24, r24
    2a4c:	2c f4       	brge	.+10     	; 0x2a58 <LCD_sendCommand+0x33a>
		__ticks = 1;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	9e 83       	std	Y+6, r25	; 0x06
    2a54:	8d 83       	std	Y+5, r24	; 0x05
    2a56:	3f c0       	rjmp	.+126    	; 0x2ad6 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2a58:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5a:	78 85       	ldd	r23, Y+8	; 0x08
    2a5c:	89 85       	ldd	r24, Y+9	; 0x09
    2a5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	3f ef       	ldi	r19, 0xFF	; 255
    2a64:	4f e7       	ldi	r20, 0x7F	; 127
    2a66:	57 e4       	ldi	r21, 0x47	; 71
    2a68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a6c:	18 16       	cp	r1, r24
    2a6e:	4c f5       	brge	.+82     	; 0x2ac2 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e2       	ldi	r20, 0x20	; 32
    2a7e:	51 e4       	ldi	r21, 0x41	; 65
    2a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	9e 83       	std	Y+6, r25	; 0x06
    2a96:	8d 83       	std	Y+5, r24	; 0x05
    2a98:	0f c0       	rjmp	.+30     	; 0x2ab8 <LCD_sendCommand+0x39a>
    2a9a:	88 ec       	ldi	r24, 0xC8	; 200
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	9c 83       	std	Y+4, r25	; 0x04
    2aa0:	8b 83       	std	Y+3, r24	; 0x03
    2aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <LCD_sendCommand+0x388>
    2aaa:	9c 83       	std	Y+4, r25	; 0x04
    2aac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aae:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	9e 83       	std	Y+6, r25	; 0x06
    2ab6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aba:	9e 81       	ldd	r25, Y+6	; 0x06
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	69 f7       	brne	.-38     	; 0x2a9a <LCD_sendCommand+0x37c>
    2ac0:	14 c0       	rjmp	.+40     	; 0x2aea <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac4:	78 85       	ldd	r23, Y+8	; 0x08
    2ac6:	89 85       	ldd	r24, Y+9	; 0x09
    2ac8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
    2ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ada:	9a 83       	std	Y+2, r25	; 0x02
    2adc:	89 83       	std	Y+1, r24	; 0x01
    2ade:	89 81       	ldd	r24, Y+1	; 0x01
    2ae0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <LCD_sendCommand+0x3c4>
    2ae6:	9a 83       	std	Y+2, r25	; 0x02
    2ae8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2aea:	e9 96       	adiw	r28, 0x39	; 57
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	de bf       	out	0x3e, r29	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	cd bf       	out	0x3d, r28	; 61
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	e9 97       	sbiw	r28, 0x39	; 57
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
    2b10:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2b12:	83 e0       	ldi	r24, 0x03	; 3
    2b14:	66 e0       	ldi	r22, 0x06	; 6
    2b16:	41 e0       	ldi	r20, 0x01	; 1
    2b18:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <GPIO_writePin>
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	a0 e8       	ldi	r26, 0x80	; 128
    2b22:	bf e3       	ldi	r27, 0x3F	; 63
    2b24:	8d ab       	std	Y+53, r24	; 0x35
    2b26:	9e ab       	std	Y+54, r25	; 0x36
    2b28:	af ab       	std	Y+55, r26	; 0x37
    2b2a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b2c:	6d a9       	ldd	r22, Y+53	; 0x35
    2b2e:	7e a9       	ldd	r23, Y+54	; 0x36
    2b30:	8f a9       	ldd	r24, Y+55	; 0x37
    2b32:	98 ad       	ldd	r25, Y+56	; 0x38
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	4a ef       	ldi	r20, 0xFA	; 250
    2b3a:	54 e4       	ldi	r21, 0x44	; 68
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	89 ab       	std	Y+49, r24	; 0x31
    2b46:	9a ab       	std	Y+50, r25	; 0x32
    2b48:	ab ab       	std	Y+51, r26	; 0x33
    2b4a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b4c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b4e:	7a a9       	ldd	r23, Y+50	; 0x32
    2b50:	8b a9       	ldd	r24, Y+51	; 0x33
    2b52:	9c a9       	ldd	r25, Y+52	; 0x34
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e8       	ldi	r20, 0x80	; 128
    2b5a:	5f e3       	ldi	r21, 0x3F	; 63
    2b5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b60:	88 23       	and	r24, r24
    2b62:	2c f4       	brge	.+10     	; 0x2b6e <LCD_displayCharacter+0x72>
		__ticks = 1;
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	98 ab       	std	Y+48, r25	; 0x30
    2b6a:	8f a7       	std	Y+47, r24	; 0x2f
    2b6c:	3f c0       	rjmp	.+126    	; 0x2bec <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2b6e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b70:	7a a9       	ldd	r23, Y+50	; 0x32
    2b72:	8b a9       	ldd	r24, Y+51	; 0x33
    2b74:	9c a9       	ldd	r25, Y+52	; 0x34
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	3f ef       	ldi	r19, 0xFF	; 255
    2b7a:	4f e7       	ldi	r20, 0x7F	; 127
    2b7c:	57 e4       	ldi	r21, 0x47	; 71
    2b7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b82:	18 16       	cp	r1, r24
    2b84:	4c f5       	brge	.+82     	; 0x2bd8 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b86:	6d a9       	ldd	r22, Y+53	; 0x35
    2b88:	7e a9       	ldd	r23, Y+54	; 0x36
    2b8a:	8f a9       	ldd	r24, Y+55	; 0x37
    2b8c:	98 ad       	ldd	r25, Y+56	; 0x38
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e2       	ldi	r20, 0x20	; 32
    2b94:	51 e4       	ldi	r21, 0x41	; 65
    2b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	bc 01       	movw	r22, r24
    2ba0:	cd 01       	movw	r24, r26
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	98 ab       	std	Y+48, r25	; 0x30
    2bac:	8f a7       	std	Y+47, r24	; 0x2f
    2bae:	0f c0       	rjmp	.+30     	; 0x2bce <LCD_displayCharacter+0xd2>
    2bb0:	88 ec       	ldi	r24, 0xC8	; 200
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	9e a7       	std	Y+46, r25	; 0x2e
    2bb6:	8d a7       	std	Y+45, r24	; 0x2d
    2bb8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2bba:	9e a5       	ldd	r25, Y+46	; 0x2e
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <LCD_displayCharacter+0xc0>
    2bc0:	9e a7       	std	Y+46, r25	; 0x2e
    2bc2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bc6:	98 a9       	ldd	r25, Y+48	; 0x30
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	98 ab       	std	Y+48, r25	; 0x30
    2bcc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bce:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd0:	98 a9       	ldd	r25, Y+48	; 0x30
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	69 f7       	brne	.-38     	; 0x2bb0 <LCD_displayCharacter+0xb4>
    2bd6:	14 c0       	rjmp	.+40     	; 0x2c00 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd8:	69 a9       	ldd	r22, Y+49	; 0x31
    2bda:	7a a9       	ldd	r23, Y+50	; 0x32
    2bdc:	8b a9       	ldd	r24, Y+51	; 0x33
    2bde:	9c a9       	ldd	r25, Y+52	; 0x34
    2be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	98 ab       	std	Y+48, r25	; 0x30
    2bea:	8f a7       	std	Y+47, r24	; 0x2f
    2bec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bee:	98 a9       	ldd	r25, Y+48	; 0x30
    2bf0:	9c a7       	std	Y+44, r25	; 0x2c
    2bf2:	8b a7       	std	Y+43, r24	; 0x2b
    2bf4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bf6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bf8:	01 97       	sbiw	r24, 0x01	; 1
    2bfa:	f1 f7       	brne	.-4      	; 0x2bf8 <LCD_displayCharacter+0xfc>
    2bfc:	9c a7       	std	Y+44, r25	; 0x2c
    2bfe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c00:	83 e0       	ldi	r24, 0x03	; 3
    2c02:	67 e0       	ldi	r22, 0x07	; 7
    2c04:	41 e0       	ldi	r20, 0x01	; 1
    2c06:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <GPIO_writePin>
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	a0 e8       	ldi	r26, 0x80	; 128
    2c10:	bf e3       	ldi	r27, 0x3F	; 63
    2c12:	8f a3       	std	Y+39, r24	; 0x27
    2c14:	98 a7       	std	Y+40, r25	; 0x28
    2c16:	a9 a7       	std	Y+41, r26	; 0x29
    2c18:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c1c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c1e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c20:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	4a ef       	ldi	r20, 0xFA	; 250
    2c28:	54 e4       	ldi	r21, 0x44	; 68
    2c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	8b a3       	std	Y+35, r24	; 0x23
    2c34:	9c a3       	std	Y+36, r25	; 0x24
    2c36:	ad a3       	std	Y+37, r26	; 0x25
    2c38:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c40:	9e a1       	ldd	r25, Y+38	; 0x26
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	40 e8       	ldi	r20, 0x80	; 128
    2c48:	5f e3       	ldi	r21, 0x3F	; 63
    2c4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c4e:	88 23       	and	r24, r24
    2c50:	2c f4       	brge	.+10     	; 0x2c5c <LCD_displayCharacter+0x160>
		__ticks = 1;
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	9a a3       	std	Y+34, r25	; 0x22
    2c58:	89 a3       	std	Y+33, r24	; 0x21
    2c5a:	3f c0       	rjmp	.+126    	; 0x2cda <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2c5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c60:	8d a1       	ldd	r24, Y+37	; 0x25
    2c62:	9e a1       	ldd	r25, Y+38	; 0x26
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	3f ef       	ldi	r19, 0xFF	; 255
    2c68:	4f e7       	ldi	r20, 0x7F	; 127
    2c6a:	57 e4       	ldi	r21, 0x47	; 71
    2c6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c70:	18 16       	cp	r1, r24
    2c72:	4c f5       	brge	.+82     	; 0x2cc6 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c74:	6f a1       	ldd	r22, Y+39	; 0x27
    2c76:	78 a5       	ldd	r23, Y+40	; 0x28
    2c78:	89 a5       	ldd	r24, Y+41	; 0x29
    2c7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e2       	ldi	r20, 0x20	; 32
    2c82:	51 e4       	ldi	r21, 0x41	; 65
    2c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	cd 01       	movw	r24, r26
    2c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	9a a3       	std	Y+34, r25	; 0x22
    2c9a:	89 a3       	std	Y+33, r24	; 0x21
    2c9c:	0f c0       	rjmp	.+30     	; 0x2cbc <LCD_displayCharacter+0x1c0>
    2c9e:	88 ec       	ldi	r24, 0xC8	; 200
    2ca0:	90 e0       	ldi	r25, 0x00	; 0
    2ca2:	98 a3       	std	Y+32, r25	; 0x20
    2ca4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ca6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ca8:	98 a1       	ldd	r25, Y+32	; 0x20
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <LCD_displayCharacter+0x1ae>
    2cae:	98 a3       	std	Y+32, r25	; 0x20
    2cb0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb2:	89 a1       	ldd	r24, Y+33	; 0x21
    2cb4:	9a a1       	ldd	r25, Y+34	; 0x22
    2cb6:	01 97       	sbiw	r24, 0x01	; 1
    2cb8:	9a a3       	std	Y+34, r25	; 0x22
    2cba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cbc:	89 a1       	ldd	r24, Y+33	; 0x21
    2cbe:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc0:	00 97       	sbiw	r24, 0x00	; 0
    2cc2:	69 f7       	brne	.-38     	; 0x2c9e <LCD_displayCharacter+0x1a2>
    2cc4:	14 c0       	rjmp	.+40     	; 0x2cee <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2cc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2cca:	8d a1       	ldd	r24, Y+37	; 0x25
    2ccc:	9e a1       	ldd	r25, Y+38	; 0x26
    2cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	9a a3       	std	Y+34, r25	; 0x22
    2cd8:	89 a3       	std	Y+33, r24	; 0x21
    2cda:	89 a1       	ldd	r24, Y+33	; 0x21
    2cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    2cde:	9e 8f       	std	Y+30, r25	; 0x1e
    2ce0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ce2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ce4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <LCD_displayCharacter+0x1ea>
    2cea:	9e 8f       	std	Y+30, r25	; 0x1e
    2cec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	69 ad       	ldd	r22, Y+57	; 0x39
    2cf2:	0e 94 df 10 	call	0x21be	; 0x21be <GPIO_writePort>
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	a0 e8       	ldi	r26, 0x80	; 128
    2cfc:	bf e3       	ldi	r27, 0x3F	; 63
    2cfe:	89 8f       	std	Y+25, r24	; 0x19
    2d00:	9a 8f       	std	Y+26, r25	; 0x1a
    2d02:	ab 8f       	std	Y+27, r26	; 0x1b
    2d04:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d06:	69 8d       	ldd	r22, Y+25	; 0x19
    2d08:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	4a ef       	ldi	r20, 0xFA	; 250
    2d14:	54 e4       	ldi	r21, 0x44	; 68
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	8d 8b       	std	Y+21, r24	; 0x15
    2d20:	9e 8b       	std	Y+22, r25	; 0x16
    2d22:	af 8b       	std	Y+23, r26	; 0x17
    2d24:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d26:	6d 89       	ldd	r22, Y+21	; 0x15
    2d28:	7e 89       	ldd	r23, Y+22	; 0x16
    2d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e8       	ldi	r20, 0x80	; 128
    2d34:	5f e3       	ldi	r21, 0x3F	; 63
    2d36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d3a:	88 23       	and	r24, r24
    2d3c:	2c f4       	brge	.+10     	; 0x2d48 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	9c 8b       	std	Y+20, r25	; 0x14
    2d44:	8b 8b       	std	Y+19, r24	; 0x13
    2d46:	3f c0       	rjmp	.+126    	; 0x2dc6 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2d48:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d50:	20 e0       	ldi	r18, 0x00	; 0
    2d52:	3f ef       	ldi	r19, 0xFF	; 255
    2d54:	4f e7       	ldi	r20, 0x7F	; 127
    2d56:	57 e4       	ldi	r21, 0x47	; 71
    2d58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d5c:	18 16       	cp	r1, r24
    2d5e:	4c f5       	brge	.+82     	; 0x2db2 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d60:	69 8d       	ldd	r22, Y+25	; 0x19
    2d62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d68:	20 e0       	ldi	r18, 0x00	; 0
    2d6a:	30 e0       	ldi	r19, 0x00	; 0
    2d6c:	40 e2       	ldi	r20, 0x20	; 32
    2d6e:	51 e4       	ldi	r21, 0x41	; 65
    2d70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d74:	dc 01       	movw	r26, r24
    2d76:	cb 01       	movw	r24, r22
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	9c 8b       	std	Y+20, r25	; 0x14
    2d86:	8b 8b       	std	Y+19, r24	; 0x13
    2d88:	0f c0       	rjmp	.+30     	; 0x2da8 <LCD_displayCharacter+0x2ac>
    2d8a:	88 ec       	ldi	r24, 0xC8	; 200
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	9a 8b       	std	Y+18, r25	; 0x12
    2d90:	89 8b       	std	Y+17, r24	; 0x11
    2d92:	89 89       	ldd	r24, Y+17	; 0x11
    2d94:	9a 89       	ldd	r25, Y+18	; 0x12
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	f1 f7       	brne	.-4      	; 0x2d96 <LCD_displayCharacter+0x29a>
    2d9a:	9a 8b       	std	Y+18, r25	; 0x12
    2d9c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2da0:	9c 89       	ldd	r25, Y+20	; 0x14
    2da2:	01 97       	sbiw	r24, 0x01	; 1
    2da4:	9c 8b       	std	Y+20, r25	; 0x14
    2da6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da8:	8b 89       	ldd	r24, Y+19	; 0x13
    2daa:	9c 89       	ldd	r25, Y+20	; 0x14
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	69 f7       	brne	.-38     	; 0x2d8a <LCD_displayCharacter+0x28e>
    2db0:	14 c0       	rjmp	.+40     	; 0x2dda <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2db2:	6d 89       	ldd	r22, Y+21	; 0x15
    2db4:	7e 89       	ldd	r23, Y+22	; 0x16
    2db6:	8f 89       	ldd	r24, Y+23	; 0x17
    2db8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	9c 8b       	std	Y+20, r25	; 0x14
    2dc4:	8b 8b       	std	Y+19, r24	; 0x13
    2dc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2dca:	98 8b       	std	Y+16, r25	; 0x10
    2dcc:	8f 87       	std	Y+15, r24	; 0x0f
    2dce:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd0:	98 89       	ldd	r25, Y+16	; 0x10
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <LCD_displayCharacter+0x2d6>
    2dd6:	98 8b       	std	Y+16, r25	; 0x10
    2dd8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2dda:	83 e0       	ldi	r24, 0x03	; 3
    2ddc:	67 e0       	ldi	r22, 0x07	; 7
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <GPIO_writePin>
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	a0 e8       	ldi	r26, 0x80	; 128
    2dea:	bf e3       	ldi	r27, 0x3F	; 63
    2dec:	8b 87       	std	Y+11, r24	; 0x0b
    2dee:	9c 87       	std	Y+12, r25	; 0x0c
    2df0:	ad 87       	std	Y+13, r26	; 0x0d
    2df2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	4a ef       	ldi	r20, 0xFA	; 250
    2e02:	54 e4       	ldi	r21, 0x44	; 68
    2e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	8f 83       	std	Y+7, r24	; 0x07
    2e0e:	98 87       	std	Y+8, r25	; 0x08
    2e10:	a9 87       	std	Y+9, r26	; 0x09
    2e12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e14:	6f 81       	ldd	r22, Y+7	; 0x07
    2e16:	78 85       	ldd	r23, Y+8	; 0x08
    2e18:	89 85       	ldd	r24, Y+9	; 0x09
    2e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	40 e8       	ldi	r20, 0x80	; 128
    2e22:	5f e3       	ldi	r21, 0x3F	; 63
    2e24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e28:	88 23       	and	r24, r24
    2e2a:	2c f4       	brge	.+10     	; 0x2e36 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	9e 83       	std	Y+6, r25	; 0x06
    2e32:	8d 83       	std	Y+5, r24	; 0x05
    2e34:	3f c0       	rjmp	.+126    	; 0x2eb4 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2e36:	6f 81       	ldd	r22, Y+7	; 0x07
    2e38:	78 85       	ldd	r23, Y+8	; 0x08
    2e3a:	89 85       	ldd	r24, Y+9	; 0x09
    2e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	3f ef       	ldi	r19, 0xFF	; 255
    2e42:	4f e7       	ldi	r20, 0x7F	; 127
    2e44:	57 e4       	ldi	r21, 0x47	; 71
    2e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e4a:	18 16       	cp	r1, r24
    2e4c:	4c f5       	brge	.+82     	; 0x2ea0 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e50:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e2       	ldi	r20, 0x20	; 32
    2e5c:	51 e4       	ldi	r21, 0x41	; 65
    2e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	bc 01       	movw	r22, r24
    2e68:	cd 01       	movw	r24, r26
    2e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	9e 83       	std	Y+6, r25	; 0x06
    2e74:	8d 83       	std	Y+5, r24	; 0x05
    2e76:	0f c0       	rjmp	.+30     	; 0x2e96 <LCD_displayCharacter+0x39a>
    2e78:	88 ec       	ldi	r24, 0xC8	; 200
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	9c 83       	std	Y+4, r25	; 0x04
    2e7e:	8b 83       	std	Y+3, r24	; 0x03
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	9c 81       	ldd	r25, Y+4	; 0x04
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	f1 f7       	brne	.-4      	; 0x2e84 <LCD_displayCharacter+0x388>
    2e88:	9c 83       	std	Y+4, r25	; 0x04
    2e8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	9e 83       	std	Y+6, r25	; 0x06
    2e94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e96:	8d 81       	ldd	r24, Y+5	; 0x05
    2e98:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	69 f7       	brne	.-38     	; 0x2e78 <LCD_displayCharacter+0x37c>
    2e9e:	14 c0       	rjmp	.+40     	; 0x2ec8 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea2:	78 85       	ldd	r23, Y+8	; 0x08
    2ea4:	89 85       	ldd	r24, Y+9	; 0x09
    2ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	9e 83       	std	Y+6, r25	; 0x06
    2eb2:	8d 83       	std	Y+5, r24	; 0x05
    2eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	9a 83       	std	Y+2, r25	; 0x02
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	f1 f7       	brne	.-4      	; 0x2ec0 <LCD_displayCharacter+0x3c4>
    2ec4:	9a 83       	std	Y+2, r25	; 0x02
    2ec6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2ec8:	e9 96       	adiw	r28, 0x39	; 57
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	de bf       	out	0x3e, r29	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	cd bf       	out	0x3d, r28	; 61
    2ed4:	cf 91       	pop	r28
    2ed6:	df 91       	pop	r29
    2ed8:	08 95       	ret

00002eda <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2eda:	df 93       	push	r29
    2edc:	cf 93       	push	r28
    2ede:	00 d0       	rcall	.+0      	; 0x2ee0 <LCD_displayString+0x6>
    2ee0:	0f 92       	push	r0
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	9b 83       	std	Y+3, r25	; 0x03
    2ee8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2eea:	19 82       	std	Y+1, r1	; 0x01
    2eec:	0e c0       	rjmp	.+28     	; 0x2f0a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	28 2f       	mov	r18, r24
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef8:	fc 01       	movw	r30, r24
    2efa:	e2 0f       	add	r30, r18
    2efc:	f3 1f       	adc	r31, r19
    2efe:	80 81       	ld	r24, Z
    2f00:	0e 94 7e 15 	call	0x2afc	; 0x2afc <LCD_displayCharacter>
		i++;
    2f04:	89 81       	ldd	r24, Y+1	; 0x01
    2f06:	8f 5f       	subi	r24, 0xFF	; 255
    2f08:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	8a 81       	ldd	r24, Y+2	; 0x02
    2f12:	9b 81       	ldd	r25, Y+3	; 0x03
    2f14:	fc 01       	movw	r30, r24
    2f16:	e2 0f       	add	r30, r18
    2f18:	f3 1f       	adc	r31, r19
    2f1a:	80 81       	ld	r24, Z
    2f1c:	88 23       	and	r24, r24
    2f1e:	39 f7       	brne	.-50     	; 0x2eee <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	0f 90       	pop	r0
    2f26:	cf 91       	pop	r28
    2f28:	df 91       	pop	r29
    2f2a:	08 95       	ret

00002f2c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2f2c:	df 93       	push	r29
    2f2e:	cf 93       	push	r28
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <LCD_moveCursor+0x6>
    2f32:	00 d0       	rcall	.+0      	; 0x2f34 <LCD_moveCursor+0x8>
    2f34:	0f 92       	push	r0
    2f36:	cd b7       	in	r28, 0x3d	; 61
    2f38:	de b7       	in	r29, 0x3e	; 62
    2f3a:	8a 83       	std	Y+2, r24	; 0x02
    2f3c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f40:	28 2f       	mov	r18, r24
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	3d 83       	std	Y+5, r19	; 0x05
    2f46:	2c 83       	std	Y+4, r18	; 0x04
    2f48:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4c:	81 30       	cpi	r24, 0x01	; 1
    2f4e:	91 05       	cpc	r25, r1
    2f50:	c1 f0       	breq	.+48     	; 0x2f82 <LCD_moveCursor+0x56>
    2f52:	2c 81       	ldd	r18, Y+4	; 0x04
    2f54:	3d 81       	ldd	r19, Y+5	; 0x05
    2f56:	22 30       	cpi	r18, 0x02	; 2
    2f58:	31 05       	cpc	r19, r1
    2f5a:	2c f4       	brge	.+10     	; 0x2f66 <LCD_moveCursor+0x3a>
    2f5c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f5e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f60:	00 97       	sbiw	r24, 0x00	; 0
    2f62:	61 f0       	breq	.+24     	; 0x2f7c <LCD_moveCursor+0x50>
    2f64:	19 c0       	rjmp	.+50     	; 0x2f98 <LCD_moveCursor+0x6c>
    2f66:	2c 81       	ldd	r18, Y+4	; 0x04
    2f68:	3d 81       	ldd	r19, Y+5	; 0x05
    2f6a:	22 30       	cpi	r18, 0x02	; 2
    2f6c:	31 05       	cpc	r19, r1
    2f6e:	69 f0       	breq	.+26     	; 0x2f8a <LCD_moveCursor+0x5e>
    2f70:	8c 81       	ldd	r24, Y+4	; 0x04
    2f72:	9d 81       	ldd	r25, Y+5	; 0x05
    2f74:	83 30       	cpi	r24, 0x03	; 3
    2f76:	91 05       	cpc	r25, r1
    2f78:	61 f0       	breq	.+24     	; 0x2f92 <LCD_moveCursor+0x66>
    2f7a:	0e c0       	rjmp	.+28     	; 0x2f98 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7e:	89 83       	std	Y+1, r24	; 0x01
    2f80:	0b c0       	rjmp	.+22     	; 0x2f98 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2f82:	8b 81       	ldd	r24, Y+3	; 0x03
    2f84:	80 5c       	subi	r24, 0xC0	; 192
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	07 c0       	rjmp	.+14     	; 0x2f98 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2f8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8c:	80 5f       	subi	r24, 0xF0	; 240
    2f8e:	89 83       	std	Y+1, r24	; 0x01
    2f90:	03 c0       	rjmp	.+6      	; 0x2f98 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	80 5b       	subi	r24, 0xB0	; 176
    2f96:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	80 68       	ori	r24, 0x80	; 128
    2f9c:	0e 94 8f 13 	call	0x271e	; 0x271e <LCD_sendCommand>
}
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	08 95       	ret

00002fb0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2fb0:	df 93       	push	r29
    2fb2:	cf 93       	push	r28
    2fb4:	00 d0       	rcall	.+0      	; 0x2fb6 <LCD_displayStringRowColumn+0x6>
    2fb6:	00 d0       	rcall	.+0      	; 0x2fb8 <LCD_displayStringRowColumn+0x8>
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	6a 83       	std	Y+2, r22	; 0x02
    2fc0:	5c 83       	std	Y+4, r21	; 0x04
    2fc2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	6a 81       	ldd	r22, Y+2	; 0x02
    2fc8:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fce:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd0:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
}
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	62 97       	sbiw	r28, 0x12	; 18
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	9a 8b       	std	Y+18, r25	; 0x12
    2ff8:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2ffa:	89 89       	ldd	r24, Y+17	; 0x11
    2ffc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ffe:	9e 01       	movw	r18, r28
    3000:	2f 5f       	subi	r18, 0xFF	; 255
    3002:	3f 4f       	sbci	r19, 0xFF	; 255
    3004:	b9 01       	movw	r22, r18
    3006:	4a e0       	ldi	r20, 0x0A	; 10
    3008:	50 e0       	ldi	r21, 0x00	; 0
    300a:	0e 94 79 1a 	call	0x34f2	; 0x34f2 <itoa>
   LCD_displayString(buff); /* Display the string */
    300e:	ce 01       	movw	r24, r28
    3010:	01 96       	adiw	r24, 0x01	; 1
    3012:	0e 94 6d 17 	call	0x2eda	; 0x2eda <LCD_displayString>
}
    3016:	62 96       	adiw	r28, 0x12	; 18
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	f8 94       	cli
    301c:	de bf       	out	0x3e, r29	; 62
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	cd bf       	out	0x3d, r28	; 61
    3022:	cf 91       	pop	r28
    3024:	df 91       	pop	r29
    3026:	08 95       	ret

00003028 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3028:	df 93       	push	r29
    302a:	cf 93       	push	r28
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	0e 94 8f 13 	call	0x271e	; 0x271e <LCD_sendCommand>
}
    3036:	cf 91       	pop	r28
    3038:	df 91       	pop	r29
    303a:	08 95       	ret

0000303c <TIMER1_init>:
 * Description of driver:
 * this driver configures timer1 dynamically,by configuration structure and callback technique.
 */
static void (*g_callBackPtr)(void) = NULL_PTR;
void TIMER1_init(const Timer1_ConfigType * Config_Ptr)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	00 d0       	rcall	.+0      	; 0x3042 <TIMER1_init+0x6>
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	9a 83       	std	Y+2, r25	; 0x02
    3048:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A|=(1<<FOC1A);
    304a:	af e4       	ldi	r26, 0x4F	; 79
    304c:	b0 e0       	ldi	r27, 0x00	; 0
    304e:	ef e4       	ldi	r30, 0x4F	; 79
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	80 81       	ld	r24, Z
    3054:	88 60       	ori	r24, 0x08	; 8
    3056:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B&0xE7)|((Config_Ptr->mode)<<3);
    3058:	ae e4       	ldi	r26, 0x4E	; 78
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	ee e4       	ldi	r30, 0x4E	; 78
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	28 2f       	mov	r18, r24
    3064:	27 7e       	andi	r18, 0xE7	; 231
    3066:	e9 81       	ldd	r30, Y+1	; 0x01
    3068:	fa 81       	ldd	r31, Y+2	; 0x02
    306a:	85 81       	ldd	r24, Z+5	; 0x05
    306c:	88 2f       	mov	r24, r24
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	88 0f       	add	r24, r24
    3072:	99 1f       	adc	r25, r25
    3074:	88 0f       	add	r24, r24
    3076:	99 1f       	adc	r25, r25
    3078:	88 0f       	add	r24, r24
    307a:	99 1f       	adc	r25, r25
    307c:	82 2b       	or	r24, r18
    307e:	8c 93       	st	X, r24
	TCCR1B=(TCCR1B&0xF8)|(Config_Ptr->prescaler);
    3080:	ae e4       	ldi	r26, 0x4E	; 78
    3082:	b0 e0       	ldi	r27, 0x00	; 0
    3084:	ee e4       	ldi	r30, 0x4E	; 78
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	98 2f       	mov	r25, r24
    308c:	98 7f       	andi	r25, 0xF8	; 248
    308e:	e9 81       	ldd	r30, Y+1	; 0x01
    3090:	fa 81       	ldd	r31, Y+2	; 0x02
    3092:	84 81       	ldd	r24, Z+4	; 0x04
    3094:	89 2b       	or	r24, r25
    3096:	8c 93       	st	X, r24
	if(Config_Ptr->mode==Normal)
    3098:	e9 81       	ldd	r30, Y+1	; 0x01
    309a:	fa 81       	ldd	r31, Y+2	; 0x02
    309c:	85 81       	ldd	r24, Z+5	; 0x05
    309e:	88 23       	and	r24, r24
    30a0:	89 f4       	brne	.+34     	; 0x30c4 <TIMER1_init+0x88>
	{
		TIMSK|=(1<<TOIE1);
    30a2:	a9 e5       	ldi	r26, 0x59	; 89
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	e9 e5       	ldi	r30, 0x59	; 89
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	84 60       	ori	r24, 0x04	; 4
    30ae:	8c 93       	st	X, r24
		TCNT1=Config_Ptr->initial_value;
    30b0:	ac e4       	ldi	r26, 0x4C	; 76
    30b2:	b0 e0       	ldi	r27, 0x00	; 0
    30b4:	e9 81       	ldd	r30, Y+1	; 0x01
    30b6:	fa 81       	ldd	r31, Y+2	; 0x02
    30b8:	80 81       	ld	r24, Z
    30ba:	91 81       	ldd	r25, Z+1	; 0x01
    30bc:	11 96       	adiw	r26, 0x01	; 1
    30be:	9c 93       	st	X, r25
    30c0:	8e 93       	st	-X, r24
    30c2:	1e c0       	rjmp	.+60     	; 0x3100 <TIMER1_init+0xc4>
	}
	else if(Config_Ptr->mode==CTC)
    30c4:	e9 81       	ldd	r30, Y+1	; 0x01
    30c6:	fa 81       	ldd	r31, Y+2	; 0x02
    30c8:	85 81       	ldd	r24, Z+5	; 0x05
    30ca:	81 30       	cpi	r24, 0x01	; 1
    30cc:	c9 f4       	brne	.+50     	; 0x3100 <TIMER1_init+0xc4>
	{
		TCNT1=Config_Ptr->initial_value;
    30ce:	ac e4       	ldi	r26, 0x4C	; 76
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e9 81       	ldd	r30, Y+1	; 0x01
    30d4:	fa 81       	ldd	r31, Y+2	; 0x02
    30d6:	80 81       	ld	r24, Z
    30d8:	91 81       	ldd	r25, Z+1	; 0x01
    30da:	11 96       	adiw	r26, 0x01	; 1
    30dc:	9c 93       	st	X, r25
    30de:	8e 93       	st	-X, r24
		OCR1A=Config_Ptr->compare_value;
    30e0:	aa e4       	ldi	r26, 0x4A	; 74
    30e2:	b0 e0       	ldi	r27, 0x00	; 0
    30e4:	e9 81       	ldd	r30, Y+1	; 0x01
    30e6:	fa 81       	ldd	r31, Y+2	; 0x02
    30e8:	82 81       	ldd	r24, Z+2	; 0x02
    30ea:	93 81       	ldd	r25, Z+3	; 0x03
    30ec:	11 96       	adiw	r26, 0x01	; 1
    30ee:	9c 93       	st	X, r25
    30f0:	8e 93       	st	-X, r24
		TIMSK|=(1<<OCIE1A);
    30f2:	a9 e5       	ldi	r26, 0x59	; 89
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	e9 e5       	ldi	r30, 0x59	; 89
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	80 61       	ori	r24, 0x10	; 16
    30fe:	8c 93       	st	X, r24
	}
}
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	cf 91       	pop	r28
    3106:	df 91       	pop	r29
    3108:	08 95       	ret

0000310a <TIMER1_deInit>:
void TIMER1_deInit(void)
{
    310a:	df 93       	push	r29
    310c:	cf 93       	push	r28
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    3112:	ef e4       	ldi	r30, 0x4F	; 79
    3114:	f0 e0       	ldi	r31, 0x00	; 0
    3116:	10 82       	st	Z, r1
	TCCR1B=0;
    3118:	ee e4       	ldi	r30, 0x4E	; 78
    311a:	f0 e0       	ldi	r31, 0x00	; 0
    311c:	10 82       	st	Z, r1
	TIMSK=0;
    311e:	e9 e5       	ldi	r30, 0x59	; 89
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	10 82       	st	Z, r1
}
    3124:	cf 91       	pop	r28
    3126:	df 91       	pop	r29
    3128:	08 95       	ret

0000312a <TIMER1_setCallBack>:
void TIMER1_setCallBack(void(*a_ptr)(void))
{
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	00 d0       	rcall	.+0      	; 0x3130 <TIMER1_setCallBack+0x6>
    3130:	cd b7       	in	r28, 0x3d	; 61
    3132:	de b7       	in	r29, 0x3e	; 62
    3134:	9a 83       	std	Y+2, r25	; 0x02
    3136:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	9a 81       	ldd	r25, Y+2	; 0x02
    313c:	90 93 f7 00 	sts	0x00F7, r25
    3140:	80 93 f6 00 	sts	0x00F6, r24
}
    3144:	0f 90       	pop	r0
    3146:	0f 90       	pop	r0
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    314e:	1f 92       	push	r1
    3150:	0f 92       	push	r0
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	0f 92       	push	r0
    3156:	11 24       	eor	r1, r1
    3158:	2f 93       	push	r18
    315a:	3f 93       	push	r19
    315c:	4f 93       	push	r20
    315e:	5f 93       	push	r21
    3160:	6f 93       	push	r22
    3162:	7f 93       	push	r23
    3164:	8f 93       	push	r24
    3166:	9f 93       	push	r25
    3168:	af 93       	push	r26
    316a:	bf 93       	push	r27
    316c:	ef 93       	push	r30
    316e:	ff 93       	push	r31
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
		if(g_callBackPtr != NULL_PTR)
    3178:	80 91 f6 00 	lds	r24, 0x00F6
    317c:	90 91 f7 00 	lds	r25, 0x00F7
    3180:	00 97       	sbiw	r24, 0x00	; 0
    3182:	29 f0       	breq	.+10     	; 0x318e <__vector_7+0x40>
		{
			(*g_callBackPtr)();
    3184:	e0 91 f6 00 	lds	r30, 0x00F6
    3188:	f0 91 f7 00 	lds	r31, 0x00F7
    318c:	09 95       	icall
		}
}
    318e:	cf 91       	pop	r28
    3190:	df 91       	pop	r29
    3192:	ff 91       	pop	r31
    3194:	ef 91       	pop	r30
    3196:	bf 91       	pop	r27
    3198:	af 91       	pop	r26
    319a:	9f 91       	pop	r25
    319c:	8f 91       	pop	r24
    319e:	7f 91       	pop	r23
    31a0:	6f 91       	pop	r22
    31a2:	5f 91       	pop	r21
    31a4:	4f 91       	pop	r20
    31a6:	3f 91       	pop	r19
    31a8:	2f 91       	pop	r18
    31aa:	0f 90       	pop	r0
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	0f 90       	pop	r0
    31b0:	1f 90       	pop	r1
    31b2:	18 95       	reti

000031b4 <__vector_9>:
ISR(TIMER1_OVF_vect)
{
    31b4:	1f 92       	push	r1
    31b6:	0f 92       	push	r0
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	0f 92       	push	r0
    31bc:	11 24       	eor	r1, r1
    31be:	2f 93       	push	r18
    31c0:	3f 93       	push	r19
    31c2:	4f 93       	push	r20
    31c4:	5f 93       	push	r21
    31c6:	6f 93       	push	r22
    31c8:	7f 93       	push	r23
    31ca:	8f 93       	push	r24
    31cc:	9f 93       	push	r25
    31ce:	af 93       	push	r26
    31d0:	bf 93       	push	r27
    31d2:	ef 93       	push	r30
    31d4:	ff 93       	push	r31
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	cd b7       	in	r28, 0x3d	; 61
    31dc:	de b7       	in	r29, 0x3e	; 62
		if(g_callBackPtr != NULL_PTR)
    31de:	80 91 f6 00 	lds	r24, 0x00F6
    31e2:	90 91 f7 00 	lds	r25, 0x00F7
    31e6:	00 97       	sbiw	r24, 0x00	; 0
    31e8:	29 f0       	breq	.+10     	; 0x31f4 <__vector_9+0x40>
		{
			(*g_callBackPtr)();
    31ea:	e0 91 f6 00 	lds	r30, 0x00F6
    31ee:	f0 91 f7 00 	lds	r31, 0x00F7
    31f2:	09 95       	icall
		}
}
    31f4:	cf 91       	pop	r28
    31f6:	df 91       	pop	r29
    31f8:	ff 91       	pop	r31
    31fa:	ef 91       	pop	r30
    31fc:	bf 91       	pop	r27
    31fe:	af 91       	pop	r26
    3200:	9f 91       	pop	r25
    3202:	8f 91       	pop	r24
    3204:	7f 91       	pop	r23
    3206:	6f 91       	pop	r22
    3208:	5f 91       	pop	r21
    320a:	4f 91       	pop	r20
    320c:	3f 91       	pop	r19
    320e:	2f 91       	pop	r18
    3210:	0f 90       	pop	r0
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	0f 90       	pop	r0
    3216:	1f 90       	pop	r1
    3218:	18 95       	reti

0000321a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    321a:	df 93       	push	r29
    321c:	cf 93       	push	r28
    321e:	00 d0       	rcall	.+0      	; 0x3220 <UART_init+0x6>
    3220:	00 d0       	rcall	.+0      	; 0x3222 <UART_init+0x8>
    3222:	cd b7       	in	r28, 0x3d	; 61
    3224:	de b7       	in	r29, 0x3e	; 62
    3226:	9c 83       	std	Y+4, r25	; 0x04
    3228:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    322a:	1a 82       	std	Y+2, r1	; 0x02
    322c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    322e:	eb e2       	ldi	r30, 0x2B	; 43
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	82 e0       	ldi	r24, 0x02	; 2
    3234:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3236:	ea e2       	ldi	r30, 0x2A	; 42
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	88 e1       	ldi	r24, 0x18	; 24
    323c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC=(UCSRC&0xF9)|((Config_Ptr->bit_data)<<1);
    323e:	a0 e4       	ldi	r26, 0x40	; 64
    3240:	b0 e0       	ldi	r27, 0x00	; 0
    3242:	e0 e4       	ldi	r30, 0x40	; 64
    3244:	f0 e0       	ldi	r31, 0x00	; 0
    3246:	80 81       	ld	r24, Z
    3248:	28 2f       	mov	r18, r24
    324a:	29 7f       	andi	r18, 0xF9	; 249
    324c:	eb 81       	ldd	r30, Y+3	; 0x03
    324e:	fc 81       	ldd	r31, Y+4	; 0x04
    3250:	80 81       	ld	r24, Z
    3252:	88 2f       	mov	r24, r24
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	88 0f       	add	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	82 2b       	or	r24, r18
    325c:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xCF)|((Config_Ptr->parity)<<4);
    325e:	a0 e4       	ldi	r26, 0x40	; 64
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	e0 e4       	ldi	r30, 0x40	; 64
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	28 2f       	mov	r18, r24
    326a:	2f 7c       	andi	r18, 0xCF	; 207
    326c:	eb 81       	ldd	r30, Y+3	; 0x03
    326e:	fc 81       	ldd	r31, Y+4	; 0x04
    3270:	81 81       	ldd	r24, Z+1	; 0x01
    3272:	88 2f       	mov	r24, r24
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	82 95       	swap	r24
    3278:	92 95       	swap	r25
    327a:	90 7f       	andi	r25, 0xF0	; 240
    327c:	98 27       	eor	r25, r24
    327e:	80 7f       	andi	r24, 0xF0	; 240
    3280:	98 27       	eor	r25, r24
    3282:	82 2b       	or	r24, r18
    3284:	8c 93       	st	X, r24
	UCSRC=(UCSRC&0xF7)|((Config_Ptr->stop_bit)<<3);
    3286:	a0 e4       	ldi	r26, 0x40	; 64
    3288:	b0 e0       	ldi	r27, 0x00	; 0
    328a:	e0 e4       	ldi	r30, 0x40	; 64
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	80 81       	ld	r24, Z
    3290:	28 2f       	mov	r18, r24
    3292:	27 7f       	andi	r18, 0xF7	; 247
    3294:	eb 81       	ldd	r30, Y+3	; 0x03
    3296:	fc 81       	ldd	r31, Y+4	; 0x04
    3298:	82 81       	ldd	r24, Z+2	; 0x02
    329a:	88 2f       	mov	r24, r24
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	88 0f       	add	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	88 0f       	add	r24, r24
    32a4:	99 1f       	adc	r25, r25
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	82 2b       	or	r24, r18
    32ac:	8c 93       	st	X, r24


	UCSRC = (1<<URSEL);
    32ae:	e0 e4       	ldi	r30, 0x40	; 64
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 e8       	ldi	r24, 0x80	; 128
    32b4:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    32b6:	eb 81       	ldd	r30, Y+3	; 0x03
    32b8:	fc 81       	ldd	r31, Y+4	; 0x04
    32ba:	83 81       	ldd	r24, Z+3	; 0x03
    32bc:	94 81       	ldd	r25, Z+4	; 0x04
    32be:	a5 81       	ldd	r26, Z+5	; 0x05
    32c0:	b6 81       	ldd	r27, Z+6	; 0x06
    32c2:	88 0f       	add	r24, r24
    32c4:	99 1f       	adc	r25, r25
    32c6:	aa 1f       	adc	r26, r26
    32c8:	bb 1f       	adc	r27, r27
    32ca:	88 0f       	add	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	aa 1f       	adc	r26, r26
    32d0:	bb 1f       	adc	r27, r27
    32d2:	88 0f       	add	r24, r24
    32d4:	99 1f       	adc	r25, r25
    32d6:	aa 1f       	adc	r26, r26
    32d8:	bb 1f       	adc	r27, r27
    32da:	9c 01       	movw	r18, r24
    32dc:	ad 01       	movw	r20, r26
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	92 e1       	ldi	r25, 0x12	; 18
    32e2:	aa e7       	ldi	r26, 0x7A	; 122
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	bc 01       	movw	r22, r24
    32e8:	cd 01       	movw	r24, r26
    32ea:	0e 94 20 1a 	call	0x3440	; 0x3440 <__udivmodsi4>
    32ee:	da 01       	movw	r26, r20
    32f0:	c9 01       	movw	r24, r18
    32f2:	01 97       	sbiw	r24, 0x01	; 1
    32f4:	9a 83       	std	Y+2, r25	; 0x02
    32f6:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    32f8:	e0 e4       	ldi	r30, 0x40	; 64
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3300:	89 2f       	mov	r24, r25
    3302:	99 27       	eor	r25, r25
    3304:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3306:	e9 e2       	ldi	r30, 0x29	; 41
    3308:	f0 e0       	ldi	r31, 0x00	; 0
    330a:	89 81       	ldd	r24, Y+1	; 0x01
    330c:	80 83       	st	Z, r24
}
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	cf 91       	pop	r28
    3318:	df 91       	pop	r29
    331a:	08 95       	ret

0000331c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    331c:	df 93       	push	r29
    331e:	cf 93       	push	r28
    3320:	0f 92       	push	r0
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3328:	eb e2       	ldi	r30, 0x2B	; 43
    332a:	f0 e0       	ldi	r31, 0x00	; 0
    332c:	80 81       	ld	r24, Z
    332e:	88 2f       	mov	r24, r24
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	80 72       	andi	r24, 0x20	; 32
    3334:	90 70       	andi	r25, 0x00	; 0
    3336:	00 97       	sbiw	r24, 0x00	; 0
    3338:	b9 f3       	breq	.-18     	; 0x3328 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    333a:	ec e2       	ldi	r30, 0x2C	; 44
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3342:	0f 90       	pop	r0
    3344:	cf 91       	pop	r28
    3346:	df 91       	pop	r29
    3348:	08 95       	ret

0000334a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    334a:	df 93       	push	r29
    334c:	cf 93       	push	r28
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3352:	eb e2       	ldi	r30, 0x2B	; 43
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	80 81       	ld	r24, Z
    3358:	88 23       	and	r24, r24
    335a:	dc f7       	brge	.-10     	; 0x3352 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    335c:	ec e2       	ldi	r30, 0x2C	; 44
    335e:	f0 e0       	ldi	r31, 0x00	; 0
    3360:	80 81       	ld	r24, Z
}
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	08 95       	ret

00003368 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3368:	df 93       	push	r29
    336a:	cf 93       	push	r28
    336c:	00 d0       	rcall	.+0      	; 0x336e <UART_sendString+0x6>
    336e:	0f 92       	push	r0
    3370:	cd b7       	in	r28, 0x3d	; 61
    3372:	de b7       	in	r29, 0x3e	; 62
    3374:	9b 83       	std	Y+3, r25	; 0x03
    3376:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3378:	19 82       	std	Y+1, r1	; 0x01
    337a:	0e c0       	rjmp	.+28     	; 0x3398 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	28 2f       	mov	r18, r24
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	9b 81       	ldd	r25, Y+3	; 0x03
    3386:	fc 01       	movw	r30, r24
    3388:	e2 0f       	add	r30, r18
    338a:	f3 1f       	adc	r31, r19
    338c:	80 81       	ld	r24, Z
    338e:	0e 94 8e 19 	call	0x331c	; 0x331c <UART_sendByte>
		i++;
    3392:	89 81       	ldd	r24, Y+1	; 0x01
    3394:	8f 5f       	subi	r24, 0xFF	; 255
    3396:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	28 2f       	mov	r18, r24
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	8a 81       	ldd	r24, Y+2	; 0x02
    33a0:	9b 81       	ldd	r25, Y+3	; 0x03
    33a2:	fc 01       	movw	r30, r24
    33a4:	e2 0f       	add	r30, r18
    33a6:	f3 1f       	adc	r31, r19
    33a8:	80 81       	ld	r24, Z
    33aa:	88 23       	and	r24, r24
    33ac:	39 f7       	brne	.-50     	; 0x337c <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <UART_receiveString+0xa>
    33c4:	0f 92       	push	r0
    33c6:	cd b7       	in	r28, 0x3d	; 61
    33c8:	de b7       	in	r29, 0x3e	; 62
    33ca:	9b 83       	std	Y+3, r25	; 0x03
    33cc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33ce:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    33d0:	89 81       	ldd	r24, Y+1	; 0x01
    33d2:	28 2f       	mov	r18, r24
    33d4:	30 e0       	ldi	r19, 0x00	; 0
    33d6:	8a 81       	ldd	r24, Y+2	; 0x02
    33d8:	9b 81       	ldd	r25, Y+3	; 0x03
    33da:	8c 01       	movw	r16, r24
    33dc:	02 0f       	add	r16, r18
    33de:	13 1f       	adc	r17, r19
    33e0:	0e 94 a5 19 	call	0x334a	; 0x334a <UART_recieveByte>
    33e4:	f8 01       	movw	r30, r16
    33e6:	80 83       	st	Z, r24
    33e8:	0f c0       	rjmp	.+30     	; 0x3408 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    33ea:	89 81       	ldd	r24, Y+1	; 0x01
    33ec:	8f 5f       	subi	r24, 0xFF	; 255
    33ee:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    33f0:	89 81       	ldd	r24, Y+1	; 0x01
    33f2:	28 2f       	mov	r18, r24
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	9b 81       	ldd	r25, Y+3	; 0x03
    33fa:	8c 01       	movw	r16, r24
    33fc:	02 0f       	add	r16, r18
    33fe:	13 1f       	adc	r17, r19
    3400:	0e 94 a5 19 	call	0x334a	; 0x334a <UART_recieveByte>
    3404:	f8 01       	movw	r30, r16
    3406:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3408:	89 81       	ldd	r24, Y+1	; 0x01
    340a:	28 2f       	mov	r18, r24
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	9b 81       	ldd	r25, Y+3	; 0x03
    3412:	fc 01       	movw	r30, r24
    3414:	e2 0f       	add	r30, r18
    3416:	f3 1f       	adc	r31, r19
    3418:	80 81       	ld	r24, Z
    341a:	83 32       	cpi	r24, 0x23	; 35
    341c:	31 f7       	brne	.-52     	; 0x33ea <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	28 2f       	mov	r18, r24
    3422:	30 e0       	ldi	r19, 0x00	; 0
    3424:	8a 81       	ldd	r24, Y+2	; 0x02
    3426:	9b 81       	ldd	r25, Y+3	; 0x03
    3428:	fc 01       	movw	r30, r24
    342a:	e2 0f       	add	r30, r18
    342c:	f3 1f       	adc	r31, r19
    342e:	10 82       	st	Z, r1
}
    3430:	0f 90       	pop	r0
    3432:	0f 90       	pop	r0
    3434:	0f 90       	pop	r0
    3436:	cf 91       	pop	r28
    3438:	df 91       	pop	r29
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	08 95       	ret

00003440 <__udivmodsi4>:
    3440:	a1 e2       	ldi	r26, 0x21	; 33
    3442:	1a 2e       	mov	r1, r26
    3444:	aa 1b       	sub	r26, r26
    3446:	bb 1b       	sub	r27, r27
    3448:	fd 01       	movw	r30, r26
    344a:	0d c0       	rjmp	.+26     	; 0x3466 <__udivmodsi4_ep>

0000344c <__udivmodsi4_loop>:
    344c:	aa 1f       	adc	r26, r26
    344e:	bb 1f       	adc	r27, r27
    3450:	ee 1f       	adc	r30, r30
    3452:	ff 1f       	adc	r31, r31
    3454:	a2 17       	cp	r26, r18
    3456:	b3 07       	cpc	r27, r19
    3458:	e4 07       	cpc	r30, r20
    345a:	f5 07       	cpc	r31, r21
    345c:	20 f0       	brcs	.+8      	; 0x3466 <__udivmodsi4_ep>
    345e:	a2 1b       	sub	r26, r18
    3460:	b3 0b       	sbc	r27, r19
    3462:	e4 0b       	sbc	r30, r20
    3464:	f5 0b       	sbc	r31, r21

00003466 <__udivmodsi4_ep>:
    3466:	66 1f       	adc	r22, r22
    3468:	77 1f       	adc	r23, r23
    346a:	88 1f       	adc	r24, r24
    346c:	99 1f       	adc	r25, r25
    346e:	1a 94       	dec	r1
    3470:	69 f7       	brne	.-38     	; 0x344c <__udivmodsi4_loop>
    3472:	60 95       	com	r22
    3474:	70 95       	com	r23
    3476:	80 95       	com	r24
    3478:	90 95       	com	r25
    347a:	9b 01       	movw	r18, r22
    347c:	ac 01       	movw	r20, r24
    347e:	bd 01       	movw	r22, r26
    3480:	cf 01       	movw	r24, r30
    3482:	08 95       	ret

00003484 <__prologue_saves__>:
    3484:	2f 92       	push	r2
    3486:	3f 92       	push	r3
    3488:	4f 92       	push	r4
    348a:	5f 92       	push	r5
    348c:	6f 92       	push	r6
    348e:	7f 92       	push	r7
    3490:	8f 92       	push	r8
    3492:	9f 92       	push	r9
    3494:	af 92       	push	r10
    3496:	bf 92       	push	r11
    3498:	cf 92       	push	r12
    349a:	df 92       	push	r13
    349c:	ef 92       	push	r14
    349e:	ff 92       	push	r15
    34a0:	0f 93       	push	r16
    34a2:	1f 93       	push	r17
    34a4:	cf 93       	push	r28
    34a6:	df 93       	push	r29
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
    34ac:	ca 1b       	sub	r28, r26
    34ae:	db 0b       	sbc	r29, r27
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	09 94       	ijmp

000034bc <__epilogue_restores__>:
    34bc:	2a 88       	ldd	r2, Y+18	; 0x12
    34be:	39 88       	ldd	r3, Y+17	; 0x11
    34c0:	48 88       	ldd	r4, Y+16	; 0x10
    34c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    34c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    34c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    34c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    34ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    34cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    34ce:	b9 84       	ldd	r11, Y+9	; 0x09
    34d0:	c8 84       	ldd	r12, Y+8	; 0x08
    34d2:	df 80       	ldd	r13, Y+7	; 0x07
    34d4:	ee 80       	ldd	r14, Y+6	; 0x06
    34d6:	fd 80       	ldd	r15, Y+5	; 0x05
    34d8:	0c 81       	ldd	r16, Y+4	; 0x04
    34da:	1b 81       	ldd	r17, Y+3	; 0x03
    34dc:	aa 81       	ldd	r26, Y+2	; 0x02
    34de:	b9 81       	ldd	r27, Y+1	; 0x01
    34e0:	ce 0f       	add	r28, r30
    34e2:	d1 1d       	adc	r29, r1
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	ed 01       	movw	r28, r26
    34f0:	08 95       	ret

000034f2 <itoa>:
    34f2:	fb 01       	movw	r30, r22
    34f4:	9f 01       	movw	r18, r30
    34f6:	e8 94       	clt
    34f8:	42 30       	cpi	r20, 0x02	; 2
    34fa:	c4 f0       	brlt	.+48     	; 0x352c <itoa+0x3a>
    34fc:	45 32       	cpi	r20, 0x25	; 37
    34fe:	b4 f4       	brge	.+44     	; 0x352c <itoa+0x3a>
    3500:	4a 30       	cpi	r20, 0x0A	; 10
    3502:	29 f4       	brne	.+10     	; 0x350e <itoa+0x1c>
    3504:	97 fb       	bst	r25, 7
    3506:	1e f4       	brtc	.+6      	; 0x350e <itoa+0x1c>
    3508:	90 95       	com	r25
    350a:	81 95       	neg	r24
    350c:	9f 4f       	sbci	r25, 0xFF	; 255
    350e:	64 2f       	mov	r22, r20
    3510:	77 27       	eor	r23, r23
    3512:	0e 94 aa 1a 	call	0x3554	; 0x3554 <__udivmodhi4>
    3516:	80 5d       	subi	r24, 0xD0	; 208
    3518:	8a 33       	cpi	r24, 0x3A	; 58
    351a:	0c f0       	brlt	.+2      	; 0x351e <itoa+0x2c>
    351c:	89 5d       	subi	r24, 0xD9	; 217
    351e:	81 93       	st	Z+, r24
    3520:	cb 01       	movw	r24, r22
    3522:	00 97       	sbiw	r24, 0x00	; 0
    3524:	a1 f7       	brne	.-24     	; 0x350e <itoa+0x1c>
    3526:	16 f4       	brtc	.+4      	; 0x352c <itoa+0x3a>
    3528:	5d e2       	ldi	r21, 0x2D	; 45
    352a:	51 93       	st	Z+, r21
    352c:	10 82       	st	Z, r1
    352e:	c9 01       	movw	r24, r18
    3530:	0c 94 9a 1a 	jmp	0x3534	; 0x3534 <strrev>

00003534 <strrev>:
    3534:	dc 01       	movw	r26, r24
    3536:	fc 01       	movw	r30, r24
    3538:	67 2f       	mov	r22, r23
    353a:	71 91       	ld	r23, Z+
    353c:	77 23       	and	r23, r23
    353e:	e1 f7       	brne	.-8      	; 0x3538 <strrev+0x4>
    3540:	32 97       	sbiw	r30, 0x02	; 2
    3542:	04 c0       	rjmp	.+8      	; 0x354c <strrev+0x18>
    3544:	7c 91       	ld	r23, X
    3546:	6d 93       	st	X+, r22
    3548:	70 83       	st	Z, r23
    354a:	62 91       	ld	r22, -Z
    354c:	ae 17       	cp	r26, r30
    354e:	bf 07       	cpc	r27, r31
    3550:	c8 f3       	brcs	.-14     	; 0x3544 <strrev+0x10>
    3552:	08 95       	ret

00003554 <__udivmodhi4>:
    3554:	aa 1b       	sub	r26, r26
    3556:	bb 1b       	sub	r27, r27
    3558:	51 e1       	ldi	r21, 0x11	; 17
    355a:	07 c0       	rjmp	.+14     	; 0x356a <__udivmodhi4_ep>

0000355c <__udivmodhi4_loop>:
    355c:	aa 1f       	adc	r26, r26
    355e:	bb 1f       	adc	r27, r27
    3560:	a6 17       	cp	r26, r22
    3562:	b7 07       	cpc	r27, r23
    3564:	10 f0       	brcs	.+4      	; 0x356a <__udivmodhi4_ep>
    3566:	a6 1b       	sub	r26, r22
    3568:	b7 0b       	sbc	r27, r23

0000356a <__udivmodhi4_ep>:
    356a:	88 1f       	adc	r24, r24
    356c:	99 1f       	adc	r25, r25
    356e:	5a 95       	dec	r21
    3570:	a9 f7       	brne	.-22     	; 0x355c <__udivmodhi4_loop>
    3572:	80 95       	com	r24
    3574:	90 95       	com	r25
    3576:	bc 01       	movw	r22, r24
    3578:	cd 01       	movw	r24, r26
    357a:	08 95       	ret

0000357c <_exit>:
    357c:	f8 94       	cli

0000357e <__stop_program>:
    357e:	ff cf       	rjmp	.-2      	; 0x357e <__stop_program>
